(function(b){module("N3 Tests");test("N3 tests",function(){var a=b.rdf.parsers["text/turtle"].triples('# comment lines\n  \t  \t   # comment line after whitespace\n# empty blank line, then one with spaces and tabs\n\n  \t  \t   \n<http://example.org/resource1> <http://example.org/property> <http://example.org/resource2> .\n_:anon <http://example.org/property> <http://example.org/resource2> .\n<http://example.org/resource2> <http://example.org/property> _:anon .\n# spaces and tabs throughout:\n \t <http://example.org/resource3> \t <http://example.org/property>\t <http://example.org/resource2> \t.\t \n\n# line ending with CR NL (ASCII 13, ASCII 10)\n<http://example.org/resource4> <http://example.org/property> <http://example.org/resource2> .\r\n\n# 2 statement lines separated by single CR (ASCII 10)\n<http://example.org/resource5> <http://example.org/property> <http://example.org/resource2> .\n<http://example.org/resource6> <http://example.org/property> <http://example.org/resource2> .\n\n# All literal escapes\n<http://example.org/resource7> <http://example.org/property> "simple literal" .\n<http://example.org/resource8> <http://example.org/property> "backslash:\\\\" .\n<http://example.org/resource9> <http://example.org/property> "dquote:\\"" .\n<http://example.org/resource10> <http://example.org/property> "newline:\\n" .\n<http://example.org/resource11> <http://example.org/property> "return\\r" .\n<http://example.org/resource12> <http://example.org/property> "tab:\\t" .\n\n# Space is optional before final .\n<http://example.org/resource13> <http://example.org/property> <http://example.org/resource2>.\n<http://example.org/resource14> <http://example.org/property> "x".\n<http://example.org/resource15> <http://example.org/property> _:anon.\n\n# \\u and \\U escapes\n# latin small letter e with acute symbol \\u00E9 - 3 UTF-8 bytes #xC3 #A9\n<http://example.org/resource16> <http://example.org/property> "\\u00E9" .\n# Euro symbol \\u20ac  - 3 UTF-8 bytes #xE2 #x82 #xAC\n<http://example.org/resource17> <http://example.org/property> "\\u20AC" .\n\n# XML Literals as Datatyped Literals\n<http://example.org/resource21> <http://example.org/property> ""^^<http://www.w3.org/2000/01/rdf-schema#XMLLiteral> .\n<http://example.org/resource22> <http://example.org/property> " "^^<http://www.w3.org/2000/01/rdf-schema#XMLLiteral> .\n<http://example.org/resource23> <http://example.org/property> "x"^^<http://www.w3.org/2000/01/rdf-schema#XMLLiteral> .\n<http://example.org/resource23> <http://example.org/property> "\\""^^<http://www.w3.org/2000/01/rdf-schema#XMLLiteral> .\n<http://example.org/resource24> <http://example.org/property> "<a></a>"^^<http://www.w3.org/2000/01/rdf-schema#XMLLiteral> .\n<http://example.org/resource25> <http://example.org/property> "a <b></b>"^^<http://www.w3.org/2000/01/rdf-schema#XMLLiteral> .\n<http://example.org/resource26> <http://example.org/property> "a <b></b> c"^^<http://www.w3.org/2000/01/rdf-schema#XMLLiteral> .\n<http://example.org/resource26> <http://example.org/property> "a\\n<b></b>\\nc"^^<http://www.w3.org/2000/01/rdf-schema#XMLLiteral> .\n<http://example.org/resource27> <http://example.org/property> "chat"^^<http://www.w3.org/2000/01/rdf-schema#XMLLiteral> .\n\n# Plain literals with languages\n<http://example.org/resource30> <http://example.org/property> "chat"@fr .\n<http://example.org/resource31> <http://example.org/property> "chat"@en .\n\n# Typed Literals\n<http://example.org/resource32> <http://example.org/property> "abc"^^<http://example.org/datatype1> .',
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/n3.ttl"});equals(a.length,30)});module("Turtle Test Suite");test("test-00",function(){var a=b.rdf.parsers["text/turtle"].triples("@prefix : <#> .\n[] :x :y .\n",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-00.ttl"});equals(a.length,1);equals(a[0].subject.type,"bnode");equals(a[0].property.value,"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-00.ttl#x");equals(a[0].object.value,"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-00.ttl#y")});
test("test-01",function(){var a=b.rdf.parsers["text/turtle"].triples("# Test @prefix and qnames\n@prefix :  <http://example.org/base1#> .\n@prefix a: <http://example.org/base2#> .\n@prefix b: <http://example.org/base3#> .\n:a :b :c .\na:a a:b a:c .\n:a a:a b:a .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-01.ttl"});equals(a.length,3);equals(a[0],b.rdf.triple("<http://example.org/base1#a> <http://example.org/base1#b> <http://example.org/base1#c> ."));equals(a[1],b.rdf.triple("<http://example.org/base2#a> <http://example.org/base2#b> <http://example.org/base2#c> ."));
equals(a[2],b.rdf.triple("<http://example.org/base1#a> <http://example.org/base2#a> <http://example.org/base3#a> ."))});test("test-02",function(){var a=b.rdf.parsers["text/turtle"].triples("# Test , operator\n@prefix : <http://example.org/base#> .\n:a :b :c,\n      :d,\n      :e .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-02.ttl"});equals(a.length,3);equals(a[0],b.rdf.triple("<http://example.org/base#a> <http://example.org/base#b> <http://example.org/base#c> ."));equals(a[1],b.rdf.triple("<http://example.org/base#a> <http://example.org/base#b> <http://example.org/base#d> ."));
equals(a[2],b.rdf.triple("<http://example.org/base#a> <http://example.org/base#b> <http://example.org/base#e> ."))});test("test-03",function(){var a=b.rdf.parsers["text/turtle"].triples("# Test ; operator\n@prefix : <http://example.org/base#> .\n:a :b :c ;\n   :d :e ;\n   :f :g .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-03.ttl"});equals(a.length,3);equals(a[0],b.rdf.triple("<http://example.org/base#a> <http://example.org/base#b> <http://example.org/base#c> ."));equals(a[1],b.rdf.triple("<http://example.org/base#a> <http://example.org/base#d> <http://example.org/base#e> ."));
equals(a[2],b.rdf.triple("<http://example.org/base#a> <http://example.org/base#f> <http://example.org/base#g> ."))});test("test-04",function(){var a=b.rdf.parsers["text/turtle"].triples("# Test empty [] operator; not allowed as predicate\n@prefix : <http://example.org/base#> .\n[] :a :b .\n:c :d [] .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-04.ttl"});equals(a.length,2);equals(a[0].subject.type,"bnode");equals(a[0].property.value,"http://example.org/base#a");equals(a[0].object.value,
"http://example.org/base#b");equals(a[1].subject.value,"http://example.org/base#c");equals(a[1].property.value,"http://example.org/base#d");equals(a[1].object.type,"bnode");ok(a[0].subject.value!==a[1].object.value,"the two blank nodes should have different ids")});test("test-05",function(){var a=b.rdf.parsers["text/turtle"].triples("# Test non empty [] operator; not allowed as predicate\n@prefix : <http://example.org/base#> .\n[ :a :b ] :c :d .\n:e :f [ :g :h ] .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-05.ttl"});
equals(a.length,4);equals(a[0].subject.type,"bnode");equals(a[0].property.value,"http://example.org/base#a");equals(a[0].object.value,"http://example.org/base#b");equals(a[1].subject.type,"bnode");equals(a[1].property.value,"http://example.org/base#c");equals(a[1].object.value,"http://example.org/base#d");equals(a[2].subject.type,"bnode");equals(a[2].property.value,"http://example.org/base#g");equals(a[2].object.value,"http://example.org/base#h");equals(a[3].subject.value,"http://example.org/base#e");
equals(a[3].property.value,"http://example.org/base#f");equals(a[3].object.type,"bnode");ok(a[0].subject.value===a[1].subject.value,"the blank node subjects of the first two triples should be the same");ok(a[2].subject.value===a[3].object.value,"the blank node subject of the third triple should be the same as the blank node object of the fourth triple");ok(a[0].subject.value!==a[2].subject.value,"the blank node subjects of the first and third triples should be different")});test("test-06",function(){var a=
b.rdf.parsers["text/turtle"].triples("# 'a' only allowed as a predicate\n@prefix : <http://example.org/base#> .\n:a a :b .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-06.ttl"});equals(a.length,1);equals(a[0],b.rdf.triple("<http://example.org/base#a> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.org/base#b> ."))});test("test-07",function(){var a=b.rdf.parsers["text/turtle"].triples('@prefix : <http://example.org/stuff/1.0/> .\n:a :b ( "apple" "banana" ) .',{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-07.ttl"});
equals(a.length,5);equals(a[0].subject.type,"bnode");equals(a[0].property.value,"http://www.w3.org/1999/02/22-rdf-syntax-ns#first");equals(a[0].object.value,"banana");equals(a[1].subject.type,"bnode");equals(a[1].property.value,"http://www.w3.org/1999/02/22-rdf-syntax-ns#rest");equals(a[1].object.value,"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil");ok(a[0].subject.value===a[1].subject.value);equals(a[2].subject.type,"bnode");equals(a[2].property.value,"http://www.w3.org/1999/02/22-rdf-syntax-ns#first");
equals(a[2].object.value,"apple");equals(a[3].subject.type,"bnode");equals(a[3].property.value,"http://www.w3.org/1999/02/22-rdf-syntax-ns#rest");equals(a[3].object.type,"bnode");ok(a[2].subject.value===a[3].subject.value);ok(a[3].object.value===a[1].subject.value);equals(a[4].subject.value,"http://example.org/stuff/1.0/a");equals(a[4].property.value,"http://example.org/stuff/1.0/b");equals(a[4].object.type,"bnode");ok(a[4].object.value===a[2].subject.value)});test("test-08",function(){var a=b.rdf.parsers["text/turtle"].triples("@prefix : <http://example.org/stuff/1.0/> .\n:a :b ( ) .",
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-08.ttl"});equals(a.length,1);equals(a[0],b.rdf.triple("<http://example.org/stuff/1.0/a> <http://example.org/stuff/1.0/b> <http://www.w3.org/1999/02/22-rdf-syntax-ns#nil> ."))});test("test-09",function(){var a=b.rdf.parsers["text/turtle"].triples("# Test integer datatyped literals using an OWL cardinality constraint\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n\n# based on examples in the OWL Reference\n\n_:hasParent a owl:ObjectProperty .\n\n[] a owl:Restriction ;\n  owl:onProperty _:hasParent ;\n  owl:maxCardinality 2 .",
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-09.ttl"});equals(a.length,4);equals(a[0].subject.type,"bnode");equals(a[0].subject.value,"_:hasParent");equals(a[0].property.value,"http://www.w3.org/1999/02/22-rdf-syntax-ns#type");equals(a[0].object.value,"http://www.w3.org/2002/07/owl#ObjectProperty");equals(a[1].subject.type,"bnode");equals(a[1].property.value,"http://www.w3.org/1999/02/22-rdf-syntax-ns#type");equals(a[1].object.value,"http://www.w3.org/2002/07/owl#Restriction");equals(a[2].subject.type,
"bnode");equals(a[2].property.value,"http://www.w3.org/2002/07/owl#onProperty");equals(a[2].object.value,"_:hasParent");equals(a[3].subject.type,"bnode");equals(a[3].property.value,"http://www.w3.org/2002/07/owl#maxCardinality");equals(a[3].object.value,"2");equals(a[3].object.datatype,"http://www.w3.org/2001/XMLSchema#integer");ok(a[1].subject.value===a[2].subject.value);ok(a[2].subject.value===a[3].subject.value)});test("test-10",function(){var a=b.rdf.parsers["text/turtle"].triples("<http://example.org/res1> <http://example.org/prop1> 000000 .\n<http://example.org/res2> <http://example.org/prop2> 0 .\n<http://example.org/res3> <http://example.org/prop3> 000001 .\n<http://example.org/res4> <http://example.org/prop4> 2 .\n<http://example.org/res5> <http://example.org/prop5> 4 .",
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-10.ttl"});equals(a.length,5);equals(a[0],b.rdf.triple('<http://example.org/res1> <http://example.org/prop1> "000000"^^<http://www.w3.org/2001/XMLSchema#integer> .'));equals(a[1],b.rdf.triple('<http://example.org/res2> <http://example.org/prop2> "0"^^<http://www.w3.org/2001/XMLSchema#integer> .'));equals(a[2],b.rdf.triple('<http://example.org/res3> <http://example.org/prop3> "000001"^^<http://www.w3.org/2001/XMLSchema#integer> .'));equals(a[3],
b.rdf.triple('<http://example.org/res4> <http://example.org/prop4> "2"^^<http://www.w3.org/2001/XMLSchema#integer> .'));equals(a[4],b.rdf.triple('<http://example.org/res5> <http://example.org/prop5> "4"^^<http://www.w3.org/2001/XMLSchema#integer> .'))});test("test-11",function(){var a=b.rdf.parsers["text/turtle"].triples('# Tests for - and _ in names, qnames\n@prefix ex1: <http://example.org/ex1#> .\n@prefix ex-2: <http://example.org/ex2#> .\n@prefix ex3_: <http://example.org/ex3#> .\n@prefix ex4-: <http://example.org/ex4#> .\n\nex1:foo-bar ex1:foo_bar "a" .\nex-2:foo-bar ex-2:foo_bar "b" .\nex3_:foo-bar ex3_:foo_bar "c" .\nex4-:foo-bar ex4-:foo_bar "d" .',
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-11.ttl"});equals(a.length,4);equals(a[0],b.rdf.triple('<http://example.org/ex1#foo-bar> <http://example.org/ex1#foo_bar> "a" .'));equals(a[1],b.rdf.triple('<http://example.org/ex2#foo-bar> <http://example.org/ex2#foo_bar> "b" .'));equals(a[2],b.rdf.triple('<http://example.org/ex3#foo-bar> <http://example.org/ex3#foo_bar> "c" .'));equals(a[3],b.rdf.triple('<http://example.org/ex4#foo-bar> <http://example.org/ex4#foo_bar> "d" .'))});test("test-12",
function(){var a=b.rdf.parsers["text/turtle"].triples('# Tests for rdf:_<numbers> and other qnames starting with _\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix ex:  <http://example.org/ex#> .\n@prefix :    <http://example.org/myprop#> .\n\nex:foo rdf:_1 "1" .\nex:foo rdf:_2 "2" .\nex:foo :_abc "def" .\nex:foo :_345 "678" .',{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-12.ttl"});equals(a.length,4);equals(a[0],b.rdf.triple('<http://example.org/ex#foo> <http://www.w3.org/1999/02/22-rdf-syntax-ns#_1> "1" .'));
equals(a[1],b.rdf.triple('<http://example.org/ex#foo> <http://www.w3.org/1999/02/22-rdf-syntax-ns#_2> "2" .'));equals(a[2],b.rdf.triple('<http://example.org/ex#foo> <http://example.org/myprop#_abc> "def" .'));equals(a[3],b.rdf.triple('<http://example.org/ex#foo> <http://example.org/myprop#_345> "678" .'))});test("test-13",function(){var a=b.rdf.parsers["text/turtle"].triples("# Test for : allowed\n@prefix :    <http://example.org/ron> .\n\n[] : [] .\n\n: : : .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-13.ttl"});
equals(a.length,2);equals(a[0].subject.type,"bnode");equals(a[0].property.value,"http://example.org/ron");equals(a[0].object.type,"bnode");ok(a[0].subject.value!==a[0].object.value);equals(a[1],b.rdf.triple("<http://example.org/ron> <http://example.org/ron> <http://example.org/ron> ."))});test("test-17",function(){var a=b.rdf.parsers["text/turtle"].triples('# Test long literal\n@prefix :  <http://example.org/ex#> .\n:a :b """a long\n\tliteral\nwith\nnewlines""" .',{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-17.ttl"});
equals(a.length,1);equals(a[0].subject.value,"http://example.org/ex#a");equals(a[0].property.value,"http://example.org/ex#b");equals(a[0].object.value,"a long\n\tliteral\nwith\nnewlines")});test("test-18",function(){var a=b.rdf.parsers["text/turtle"].triples('@prefix : <http://example.org/foo#> .\n\n:a :b """\\nthis \\ris a \\U00015678long\\t\nliteral\\uABCD\n""" .\n\n:d :e """\\tThis \\uABCDis\\r \\U00015678another\\n\none\n""" .',{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-18.ttl"});
equals(a.length,2);equals(a[0].subject.value,"http://example.org/foo#a");equals(a[0].property.value,"http://example.org/foo#b");equals(a[0].object.value,"\nthis \ris a \u0001\u5678long\t\nliteral\uabcd\n");equals(a[1].subject.value,"http://example.org/foo#d");equals(a[1].property.value,"http://example.org/foo#e");equals(a[1].object.value,"\tThis \uabcdis\r \u0001\u5678another\n\none\n")});test("test-19",function(){var a=b.rdf.parsers["text/turtle"].triples("@prefix : <http://example.org/#> .\n\n:a :b  1.0 .",
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-19.ttl"});equals(a.length,1);equals(a[0],b.rdf.triple('<http://example.org/#a> <http://example.org/#b> "1.0"^^<http://www.w3.org/2001/XMLSchema#decimal> .'))});test("test-20",function(){var a=b.rdf.parsers["text/turtle"].triples('@prefix : <http://example.org/#> .\n\n:a :b "" .\n\n:c :d """""" .',{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-20.ttl"});equals(a.length,2);equals(a[0],b.rdf.triple('<http://example.org/#a> <http://example.org/#b> "" .'));
equals(a[1],b.rdf.triple('<http://example.org/#c> <http://example.org/#d> "" .'))});test("test-21",function(){var a=b.rdf.parsers["text/turtle"].triples("@prefix : <http://example.org#> .\n:a :b 1.0 .\n:c :d 1 .\n:e :f 1.0e0 .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-21.ttl"});equals(a.length,3);equals(a[0],b.rdf.triple('<http://example.org#a> <http://example.org#b> "1.0"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[1],b.rdf.triple('<http://example.org#c> <http://example.org#d> "1"^^<http://www.w3.org/2001/XMLSchema#integer> .'));
equals(a[2],b.rdf.triple('<http://example.org#e> <http://example.org#f> "1.0e0"^^<http://www.w3.org/2001/XMLSchema#double> .'))});test("test-22",function(){var a=b.rdf.parsers["text/turtle"].triples("@prefix : <http://example.org#> .\n:a :b -1.0 .\n:c :d -1 .\n:e :f -1.0e0 .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-22.ttl"});equals(a.length,3);equals(a[0],b.rdf.triple('<http://example.org#a> <http://example.org#b> "-1.0"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[1],
b.rdf.triple('<http://example.org#c> <http://example.org#d> "-1"^^<http://www.w3.org/2001/XMLSchema#integer> .'));equals(a[2],b.rdf.triple('<http://example.org#e> <http://example.org#f> "-1.0e0"^^<http://www.w3.org/2001/XMLSchema#double> .'))});test("test-23",function(){var a=b.rdf.parsers["text/turtle"].triples('# Test long literal\n@prefix :  <http://example.org/ex#> .\n:a :b """John said: "Hello World!\\"""" .',{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-23.ttl"});equals(a.length,
1);equals(a[0],b.rdf.triple('<http://example.org/ex#a> <http://example.org/ex#b> "John said: \\"Hello World!\\"" .'))});test("test-24",function(){var a=b.rdf.parsers["text/turtle"].triples("@prefix : <http://example.org#> .\n:a :b true .\n:c :d false .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-24.ttl"});equals(a.length,2);equals(a[0],b.rdf.triple('<http://example.org#a> <http://example.org#b> "true"^^<http://www.w3.org/2001/XMLSchema#boolean> .'));equals(a[1],b.rdf.triple('<http://example.org#c> <http://example.org#d> "false"^^<http://www.w3.org/2001/XMLSchema#boolean> .'))});
test("test-25",function(){var a=b.rdf.parsers["text/turtle"].triples("# comment test\n@prefix : <http://example.org/#> .\n:a :b :c . # end of line comment\n:d # ignore me\n  :e # and me\n      :f # and me\n        .\n:g :h #ignore me\n     :i,  # and me\n     :j . # and me\n     \n:k :l :m ; #ignore me\n   :n :o ; # and me\n   :p :q . # and me",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-25.ttl"});equals(a.length,7);equals(a[0],b.rdf.triple("<http://example.org/#a> <http://example.org/#b> <http://example.org/#c> ."));
equals(a[1],b.rdf.triple("<http://example.org/#d> <http://example.org/#e> <http://example.org/#f> ."));equals(a[2],b.rdf.triple("<http://example.org/#g> <http://example.org/#h> <http://example.org/#i> ."));equals(a[3],b.rdf.triple("<http://example.org/#g> <http://example.org/#h> <http://example.org/#j> ."));equals(a[4],b.rdf.triple("<http://example.org/#k> <http://example.org/#l> <http://example.org/#m> ."));equals(a[5],b.rdf.triple("<http://example.org/#k> <http://example.org/#n> <http://example.org/#o> ."));
equals(a[6],b.rdf.triple("<http://example.org/#k> <http://example.org/#p> <http://example.org/#q> ."))});test("test-26",function(){var a=b.rdf.parsers["text/turtle"].triples("# comment line with no final newline test\n@prefix : <http://example.org/#> .\n:a :b :c .\n#foo",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-26.ttl"});equals(a.length,1);equals(a[0],b.rdf.triple("<http://example.org/#a> <http://example.org/#b> <http://example.org/#c> ."))});test("test-27",function(){var a=b.rdf.parsers["text/turtle"].triples("@prefix foo: <http://example.org/foo#>  .\n@prefix foo: <http://example.org/bar#>  .\n\nfoo:blah foo:blah foo:blah .",
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-27.ttl"});equals(a.length,1);equals(a[0],b.rdf.triple("<http://example.org/bar#blah> <http://example.org/bar#blah> <http://example.org/bar#blah> ."))});test("test-28",function(){var a=b.rdf.parsers["text/turtle"].triples('<http://example.org/foo> <http://example.org/bar> "2.345"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "1"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "1.0"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "1."^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "1.000000000"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.3"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.234000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.2340000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.23400000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.234000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.2340000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.23400000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.234000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.2340000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.23400000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.234000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.2340000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.23400000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.234000000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.2340000000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "2.23400000000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .\n<http://example.org/foo> <http://example.org/bar> "1.2345678901234567890123457890"^^<http://www.w3.org/2001/XMLSchema#decimal> .',
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-28.ttl"});equals(a.length,22);equals(a[0],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.345"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[1],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "1.0"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[2],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "1.0"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[3],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "1.0"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));
equals(a[4],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "1.0"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[5],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.30"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[6],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.234000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[7],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.2340000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));
equals(a[8],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.23400000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[9],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.234000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[10],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.2340000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[11],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.23400000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));
equals(a[12],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.234000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[13],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.2340000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[14],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.23400000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[15],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.234000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));
equals(a[16],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.2340000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[17],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.23400000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[18],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.234000000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[19],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.2340000000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));
equals(a[20],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "2.23400000000000000000005"^^<http://www.w3.org/2001/XMLSchema#decimal> .'));equals(a[21],b.rdf.triple('<http://example.org/foo> <http://example.org/bar> "1.234567890123456789012345789"^^<http://www.w3.org/2001/XMLSchema#decimal> .'))});test("test-30",function(){var a=b.rdf.parsers["text/turtle"].triples("# In-scope base URI is http://www.w3.org/2001/sw/DataAccess/df1/tests/ at this point\n<a1> <b1> <c1> .\n@base <http://example.org/ns/> .\n# In-scope base URI is http://example.org/ns/ at this point\n<a2> <http://example.org/ns/b2> <c2> .\n@base <foo/> .\n# In-scope base URI is http://example.org/ns/foo/ at this point\n<a3> <b3> <c3> .\n@prefix : <bar#> .\n:a4 :b4 :c4 .\n@prefix : <http://example.org/ns2#> .\n:a5 :b5 :c5 .",
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/test-30.ttl"});equals(a.length,5);equals(a[0],b.rdf.triple("<http://www.w3.org/2001/sw/DataAccess/df1/tests/a1> <http://www.w3.org/2001/sw/DataAccess/df1/tests/b1> <http://www.w3.org/2001/sw/DataAccess/df1/tests/c1> ."));equals(a[1],b.rdf.triple("<http://example.org/ns/a2> <http://example.org/ns/b2> <http://example.org/ns/c2> ."));equals(a[2],b.rdf.triple("<http://example.org/ns/foo/a3> <http://example.org/ns/foo/b3> <http://example.org/ns/foo/c3> ."));
equals(a[3],b.rdf.triple("<http://example.org/ns/foo/bar#a4> <http://example.org/ns/foo/bar#b4> <http://example.org/ns/foo/bar#c4> ."));equals(a[4],b.rdf.triple("<http://example.org/ns2#a5> <http://example.org/ns2#b5> <http://example.org/ns2#c5> ."))});test("bad-00",function(){try{b.rdf.parsers["text/turtle"].triples("# prefix name must end in a :\n@prefix a <#> .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-00.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});
test("bad-01",function(){try{b.rdf.parsers["text/turtle"].triples("# Forbidden by RDF - predicate cannot be blank\n@prefix : <http://example.org/base#> .\n:a [ :b :c ] :d .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-01.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-02",function(){try{b.rdf.parsers["text/turtle"].triples("# Forbidden by RDF - predicate cannot be blank\n@prefix : <http://example.org/base#> .\n:a [] :b .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-02.ttl"});
ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-03",function(){try{b.rdf.parsers["text/turtle"].triples("# 'a' only allowed as a predicate\n@prefix : <http://example.org/base#> .\na :a :b .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-03.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-04",function(){try{b.rdf.parsers["text/turtle"].triples('# No comma is allowed in collections\n@prefix : <http://example.org/stuff/1.0/> .\n:a :b ( "apple", "banana" ) .',
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-04.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-05",function(){try{b.rdf.parsers["text/turtle"].triples("# N3 {}s are not in Turtle\n@prefix : <http://example.org/stuff/1.0/> .\n{ :a :b :c . } :d :e .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-05.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-06",function(){try{b.rdf.parsers["text/turtle"].triples("# is and of are not in turtle\n@prefix : <http://example.org/stuff/1.0/> .\n:a is :b of :c .",
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-06.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-07",function(){try{b.rdf.parsers["text/turtle"].triples("# paths are not in turtle\n@prefix : <http://example.org/stuff/1.0/> .\n:a.:b.:c .\n:a^:b^:c .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-06.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-08",function(){try{b.rdf.parsers["text/turtle"].triples("@keywords something.\n# @keywords is not in turtle",
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-08.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-09",function(){try{b.rdf.parsers["text/turtle"].triples("# implies is not in turtle\n@prefix : <http://example.org/stuff/1.0/> .\n:a => :b .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-09.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-10",function(){try{b.rdf.parsers["text/turtle"].triples("# equivalence is not in turtle\n@prefix : <http://example.org/stuff/1.0/> .\n:a = :b .",
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-10.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-11",function(){try{b.rdf.parsers["text/turtle"].triples("# @forAll is not in turtle\n@prefix : <http://example.org/stuff/1.0/> .\n@forAll :x .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-11.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-12",function(){try{b.rdf.parsers["text/turtle"].triples("# @forSome is not in turtle\n@prefix : <http://example.org/stuff/1.0/> .\n@forSome :x .",
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-12.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-13",function(){try{b.rdf.parsers["text/turtle"].triples("# <= is not in turtle\n@prefix : <http://example.org/stuff/1.0/> .\n:a <= :b .",{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-13.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}});test("bad-14",function(){try{b.rdf.parsers["text/turtle"].triples('# Test long literals with missing end\n@prefix :  <http://example.org/ex#> .\n:a :b """a long\n\tliteral\nwith\nnewlines',
{base:"http://www.w3.org/2001/sw/DataAccess/df1/tests/bad-14.ttl"});ok(false,"should give an error")}catch(a){ok(true,"should give an error")}})})(jQuery);
