(function(c){function d(b){c("#main").html(b)}function e(){c("#main > *").remove()}function h(b,a){var f,i=b.databank.triples();equals(i.length,a.length,"there should be "+a.length+" triples");for(f=0;f<a.length;f+=1)equals(i[f],a[f])}var g=c.uri("http://xmlns.com/foaf/0.1/");c.rdf.resource("<"+g+"Person>");c.rdf.resource("<"+g+"knows>");c.rdf.resource("<"+g+"weblog>");module("Gleaning RDF triples with $.fn.rdf()");test("from an element without any xfn",function(){d("<p>This is just a paragraph</p>");
h(c("#main > p").rdf(),[]);e()});test("from an element with a rel='me'",function(){d('<p>Me: <a href="http://example.com/" rel="me">Test Person1</a></p>');h(c("#main > p > a").rdf(),[]);e()});test("from an element with a rel='friend'",function(){d('<p>Friend: <a href="http://example.com/" rel="friend">Test Person2</a></p>');var b="<"+c.uri.base()+">",a=c("#main > p > a").rdf();equals(a.databank.size(),5,"there should be five triples");a=a.where("?person a foaf:Person");equals(a.length,2,"there should be two people");
a=a.where("?person foaf:weblog ?work");equals(a.length,2,"they should each have a weblog");a=a.where("?person foaf:knows ?personB");equals(a.length,1,"one of them should know the other");a=a.where("?person foaf:weblog "+b);equals(a.length,1,"the first person should have this document as their weblog");a=a.where("?personB foaf:weblog <http://example.com/>");equals(a.length,1,"the second person should have http://example.com/ as their weblog");e()});test("from an element with a rel='friend met'",function(){d('<p>Friend and met: <a href="http://example.com/" rel="friend met">Test Person3</a></p>');
var b="<"+c.uri.base()+">",a=c("#main > p > a").rdf();equals(a.databank.size(),5,"there should be five triples");a=a.where("?person a foaf:Person");equals(a.length,2,"there should be two people");a=a.where("?person foaf:weblog ?work");equals(a.length,2,"they should each have a weblog");a=a.where("?person foaf:knows ?personB");equals(a.length,1,"one of them should know the other");a=a.where("?person foaf:weblog "+b);equals(a.length,1,"the first person should have this document as their weblog");a=
a.where("?personB foaf:weblog <http://example.com/>");equals(a.length,1,"the second person should have http://example.com/ as their weblog");e()});module("Gleaning RDF triples with $.fn.xfn()");test("from an element without an xfn",function(){d("<p>This is just a paragraph</p>");h(c("#main > p").xfn(),[]);e()});test("from an element with a rel='me'",function(){d('<p>Me: <a href="http://example.com/" rel="me">Test Person1</a></p>');h(c("#main > p > a").xfn(),[]);e()});test("from an element with a rel='friend'",
function(){d('<p>Friend: <a href="http://example.com/" rel="friend">Test Person2</a></p>');var b="<"+c.uri.base()+">",a=c("#main > p > a").xfn();a.prefix("foaf",g);equals(a.databank.size(),5,"there should be five triples");a=a.where("?person a foaf:Person");equals(a.length,2,"there should be two people");a=a.where("?person foaf:weblog ?work");equals(a.length,2,"they should each have a weblog");a=a.where("?person foaf:knows ?personB");equals(a.length,1,"one of them should know the other");a=a.where("?person foaf:weblog "+
b);equals(a.length,1,"the first person should have this document as their weblog");a=a.where("?personB foaf:weblog <http://example.com/>");equals(a.length,1,"the second person should have http://example.com/ as their weblog");e()});test("from an element with a rel='friend met'",function(){d('<p>Friend and met: <a href="http://example.com/" rel="friend met">Test Person3</a></p>');var b="<"+c.uri.base()+">",a=c("#main > p > a").xfn();a.prefix("foaf",g);equals(a.databank.size(),5,"there should be five triples");
a=a.where("?person a foaf:Person");equals(a.length,2,"there should be two people");a=a.where("?person foaf:weblog ?work");equals(a.length,2,"they should each have a weblog");a=a.where("?person foaf:knows ?personB");equals(a.length,1,"one of them should know the other");a=a.where("?person foaf:weblog "+b);equals(a.length,1,"the first person should have this document as their weblog");a=a.where("?personB foaf:weblog <http://example.com/>");equals(a.length,1,"the second person should have http://example.com/ as their weblog");
e()});module("Adding xfn information with $.fn.xfn()");test("to an element without a href attribute",function(){d("<p>This is just a paragraph</p>");var b=c("#main > p");b.xfn("met");equals(b.attr("rel"),undefined,"it shouldn't add anything");e()});test("to an element with a href attribute",function(){d('<p>Met: <a href="http://example.com/">Mr Foo</a></p>');var b=c("#main > p > a");b.xfn("met");equals(b.attr("rel"),"met");e()});test("to an element that already has a rel attribute",function(){d('<p>Met: <a href="http://example.com/" rel="friend">Mr Foo</a></p>');
var b=c("#main > p > a");b.xfn("met");equals(b.attr("rel"),"friend met");e()});module("Using type() selector");test("from an element without an xfn using type()",function(){d("<p>This is just a paragraph</p>");var b=c("#main *:type()");equals(b.length,0);e()});test("finding all elements with a rel for xfn using type()",function(){d('<p>Met: <a href="http://example.com/">Mr Foo</a></p>');var b=c("#main *:type()");equals(b.length,1);ok(b.is("a"),"it should locate the <a> element");e()});test("from an element without a rel using type(foaf:Person)",
function(){d("<p>This is just a paragraph</p>");var b=c('#main *:type("foaf:Person")');equals(b.length,0);e()});test("finding all elements with a rel using type(foaf:Person)",function(){d('<p>Met: <a href="http://example.com/">Mr Foo</a></p>');var b=c("#main *:type('foaf:Person')");equals(b.length,1);ok(b.is("a"),"it should locate the <a> element");e()});module("Using about() selector");test("from an element without a xfn using about()",function(){d("<p>This is just a paragraph</p>");var b=c("#main *:about()");
equals(b.length,0);e()});test("finding all elements with a rel='license' using about()",function(){d('<p>Met: <a href="http://example.com/">Mr Foo</a></p>');var b=c("#main *:about()");equals(b.length,1);ok(b.is("a"),"it should locate the <a> element");e()})})(jQuery);
