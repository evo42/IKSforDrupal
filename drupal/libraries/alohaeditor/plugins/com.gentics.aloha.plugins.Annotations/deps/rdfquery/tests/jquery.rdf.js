(function(c){function g(a){var b;try{b=new ActiveXObject("Microsoft.XMLDOM");b.async="false";b.loadXML(a)}catch(e){b=(new DOMParser).parseFromString(a,"text/xml")}return b}var d={rdf:"http://www.w3.org/1999/02/22-rdf-syntax-ns#",xsd:"http://www.w3.org/2001/XMLSchema#",dc:"http://purl.org/dc/elements/1.1/",foaf:"http://xmlns.com/foaf/0.1/",cc:"http://creativecommons.org/ns#",vcard:"http://www.w3.org/2001/vcard-rdf/3.0#",xmlns:"http://www.w3.org/2000/xmlns/",xml:"http://www.w3.org/XML/1998/namespace"},
h=c.rdf.databank().prefix("rdf",d.rdf).prefix("rdfs","http://www.w3.org/2000/01/rdf-schema#").prefix("foaf",d.foaf).prefix("dc",d.dc).prefix("dct","http://purl.org/dc/terms/").prefix("xsd",d.xsd).prefix("ex","http://example.com/").add('<http://example.com/aReallyGreatBook> dc:title "A Really Great Book" .').add('<http://example.com/aReallyGreatBook> dc:publisher "Examples-R-Us" .').add("<http://example.com/aReallyGreatBook> dc:creator _:creator .").add("_:creator a <http://xmlns.com/foaf/0.1/Person> .").add('_:creator foaf:name "John Doe" .').add('_:creator foaf:mbox "john@example.com" .').add("_:creator foaf:img <http://example.com/john.jpg> .").add("<http://example.com/john.jpg> a <http://xmlns.com/foaf/0.1/Image> .").add('<http://example.com/john.jpg> dc:format "image/jpeg" .').add('<http://example.com/john.jpg> dc:extent "1234" .').add("_:creator foaf:phone <tel:+1-999-555-1234> .").add("<http://example.com/aReallyGreatBook> dc:contributor _:contributor .").add("_:contributor a <http://xmlns.com/foaf/0.1/Person> .").add('_:contributor foaf:name "Jane Doe" .').add('<http://example.com/aReallyGreatBook> dc:language "en" .').add('<http://example.com/aReallyGreatBook> dc:format "applicaiton/pdf" .').add('<http://example.com/aReallyGreatBook> dc:rights "Copyright (C) 2004 Examples-R-Us. All rights reserved." .').add('<http://example.com/aReallyGreatBook> dct:issued "2004-01-19"^^xsd:date .').add("<http://example.com/aReallyGreatBook> rdfs:seeAlso <http://example.com/anotherGreatBook> .").add('<http://example.com/anotherGreatBook> dc:title "Another Great Book" .').add('<http://example.com/anotherGreatBook> dc:publisher "Examples-R-Us" .').add('<http://example.com/anotherGreatBook> dc:creator "June Doe (june@example.com)" .').add('<http://example.com/anotherGreatBook> dc:format "application/pdf" .').add('<http://example.com/anotherGreatBook> dc:language "en" .').add('<http://example.com/anotherGreatBook> dc:rights "Copyright (C) 2004 Examples-R-Us. All rights reserved." .').add('<http://example.com/anotherGreatBook> dct:issued "2004-05-03"^^xsd:date .').add("<http://example.com/anotherGreatBook> rdfs:seeAlso <http://example.com/aReallyGreatBook> .").add("<http://example.com/aBookCritic> ex:likes <http://example.com/aReallyGreatBook> .").add("<http://example.com/aBookCritic> ex:dislikes <http://example.com/anotherGreatBook> .");
module("Navigation Tests");test("navigating to a resource",function(){var a=c.rdf({databank:h}).node("<http://example.com/aReallyGreatBook>");equals(a.length,1,"it should have found one resource");equals(a[0].node.value,"http://example.com/aReallyGreatBook","it should have found the resource that was requested")});test("navigating to a literal",function(){var a=c.rdf({databank:h}).node('"John Doe"');equals(a.length,1,"it should have found one literal")});test("navigating to several nodes via a where",
function(){var a=c.rdf({databank:h}).where("?book dc:title ?title").node("?book");equals(a.length,2,"it should have found two books");equals(a[0].node.value,"http://example.com/aReallyGreatBook");equals(a[1].node.value,"http://example.com/anotherGreatBook")});test("navigating from a node to a property",function(){var a=c.rdf({databank:h}).node("<http://example.com/aReallyGreatBook>");equals(a.length,1,"it should find a single resource");a=a.find("dc:creator");equals(a.length,1,"it should have found one creator");
equals(a[0].node.value,"_:creator");a=a.find("foaf:name");equals(a.length,1,"it should have found one name");equals(a[0].node.value,"John Doe")});test("navigating to several nodes and then to their property",function(){var a=c.rdf({databank:h}).where("?book dc:title ?title").node("?book").find("dc:creator");equals(a.length,2,"it should have found two creators")});test("navigating backwards",function(){var a=c.rdf({databank:h}).node("foaf:Person").back("rdf:type");equals(a.length,2,"it should have found two people")});
module("Triplestore Tests");test("creating an empty triple store",function(){var a=c.rdf();equals(a.databank.size(),0,"the length of the triple store should be zero");equals(a.length,0,"the length of the matches should be zero");equals(a.size(),0,"the size of the matches should be zero")});test("creating a triple store from an array of $.rdf.triple objects",function(){var a={dc:d.dc,foaf:d.foaf};a=[c.rdf.triple("<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .",{namespaces:a}),c.rdf.triple("<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .",
{namespaces:a})];var b=c.rdf({triples:a});equals(b.databank.size(),2,"the length of the databank should be two");equals(b.length,0,"the length of the matches should be zero");equals(b.databank.triples()[0],a[0]);equals(b.databank.triples()[1],a[1]);b=b.describe(["<photo1.jpg>"]);equals(b[0],a[0]);equals(b[1],a[1])});test("creating a triple store from an array of strings",function(){var a=["<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .","<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> ."];
a=c.rdf({triples:a,namespaces:{dc:d.dc,foaf:d.foaf}});equals(a.databank.size(),2,"the length of the triple store should be two");equals(a.length,0,"the length of the query should be zero");equals(a.size(),0,"the size of the query should be zero");a=a.databank.triples();equals(a[0].subject.type,"uri","the subject of the first triple should be a resource");equals(a[0].property.type,"uri","the property of the first triple should be a resource");equals(a[0].object.type,"uri","the object of the first triple should be a resource");
equals(a[1].subject.type,"uri","the subject of the first triple should be a resource");equals(a[1].property.type,"uri","the property of the first triple should be a resource");equals(a[1].object.type,"uri","the object of the first triple should be a resource")});test("adding duplicate triples to a triple store",function(){var a=c.rdf().prefix("dc",d.dc).add('_:a dc:creator "Jeni" .').add('_:a dc:creator "Jeni" .');equals(a.databank.size(),1,"should only result in one triple being added")});test("selecting triples using a search pattern",
function(){var a=c.rdf({triples:["<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .","<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .","<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> ."],namespaces:{dc:d.dc,foaf:d.foaf}});equals(a.databank.size(),3,"there should be three triples in the databank");equals(a.length,0);a=a.where("?photo dc:creator <http://www.blogger.com/profile/1109404>");equals(a.length,2,"number of items after filtering");equals(a[0].photo.value,
c.uri("photo1.jpg"));equals(a[1].photo.value,c.uri("photo2.jpg"));var b=a.select();equals(b[0].photo.type,"uri");equals(b[0].photo.value,c.uri("photo1.jpg"));equals(b[1].photo.type,"uri");equals(b[1].photo.value,c.uri("photo2.jpg"));a=a.describe(["?photo"]);equals(a.length,3)});test("creating triples and specifying options should helpfully bind prefixes",function(){var a=c.rdf({triples:["<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .","<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .",
"<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> ."],namespaces:{dc:d.dc,foaf:d.foaf}});try{a.where("?photo dc:creator <http://www.blogger.com/profile/1109404>");ok(true,"should not raise an error");equals(a.prefix("dc"),d.dc);equals(a.prefix("foaf"),d.foaf)}catch(b){ok(false,"should not raise the error "+b.message)}});test("adding another triple that matches the original search pattern",function(){var a=c.rdf().prefix("dc",d.dc).prefix("foaf",d.foaf).add("<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .").where("?photo dc:creator <http://www.blogger.com/profile/1109404>");
equals(a.length,1,"number of items after filtering");equals(a[0].photo.value,c.uri("photo1.jpg"));a.add("<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> .");equals(a.length,2,"number of items after filtering");equals(a[1].photo.value,c.uri("photo2.jpg"))});test("selecting triples using two search patterns",function(){var a={dc:d.dc,foaf:d.foaf},b=["<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .","<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .",
"<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> ."],e=c.rdf({triples:b,namespaces:a}).where("?photo dc:creator ?creator").where("?creator foaf:img ?photo");equals(e.length,1,"number of items after filtering");equals(e[0].photo.value,c.uri("photo1.jpg"));equals(e[0].creator.value,c.uri("http://www.blogger.com/profile/1109404"));equals(e.sources()[0][0],c.rdf.triple(b[0],{namespaces:a}));equals(e.sources()[0][1],c.rdf.triple(b[1],{namespaces:a}));a=e.select();equals(a[0].photo.type,
"uri");equals(a[0].photo.value,c.uri("photo1.jpg"));equals(a[0].creator.type,"uri");equals(a[0].creator.value,"http://www.blogger.com/profile/1109404");e=e.select(["creator"]);equals(e[0].creator.type,"uri");equals(e[0].creator.value,"http://www.blogger.com/profile/1109404");ok(e[0].photo===undefined,"there should not be a photo property")});test("selecting triples using two search patterns, then adding a triple",function(){var a=c.rdf({triples:["<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .",
"<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .","<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> ."],namespaces:{dc:d.dc,foaf:d.foaf}}),b=a.where("?photo dc:creator ?creator").where("?creator foaf:img ?photo");equals(b.length,1,"number of items after filtering");equals(b[0].photo.value,c.uri("photo1.jpg"));a.add("<http://www.blogger.com/profile/1109404> foaf:img <photo2.jpg> .");equals(b.length,2,"number of items after adding a new triple");equals(b[1].photo.value,
c.uri("photo2.jpg"))});test("using a callback function on each match",function(){var a=0,b=[];c.rdf({triples:["<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .","<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .","<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> .","<http://www.blogger.com/profile/1109404> foaf:img <photo2.jpg> ."],namespaces:{dc:d.dc,foaf:d.foaf}}).where("?photo dc:creator ?creator").where("?creator foaf:img ?photo").each(function(e,
f){a+=1;b.push(f.photo)});equals(a,2,"it should iterate twice");equals(b[0].value,c.uri("photo1.jpg"));equals(b[1].value,c.uri("photo2.jpg"))});test("using three arguments with each() to get the source triples",function(){var a=[],b={dc:d.dc,foaf:d.foaf},e=["<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .","<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .","<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> .","<http://www.blogger.com/profile/1109404> foaf:img <photo2.jpg> ."];
c.rdf({triples:e,namespaces:b}).where("?photo dc:creator ?creator").where("?creator foaf:img ?photo").each(function(f,j,i){a.push(i)});equals(a[0][0],c.rdf.triple(e[0],{namespaces:b}));equals(a[0][1],c.rdf.triple(e[1],{namespaces:b}));equals(a[1][0],c.rdf.triple(e[2],{namespaces:b}));equals(a[1][1],c.rdf.triple(e[3],{namespaces:b}))});test("mapping each match to an array",function(){var a=c.rdf().prefix("dc",d.dc).prefix("foaf",d.foaf).add("<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .").add("<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo2.jpg> .").where("?photo dc:creator ?creator").where("?creator foaf:img ?photo").map(function(){return this.photo.value});
equals(a[0],c.uri("photo1.jpg"));equals(a[1],c.uri("photo2.jpg"))});test("using the result of bindings() as a jQuery objectct",function(){var a=c.rdf().prefix("dc",d.dc).prefix("foaf",d.foaf).add("<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .").add("<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo2.jpg> .").where("?photo dc:creator ?creator").where("?creator foaf:img ?photo").map(function(){return this.photo.value});
equals(a[0],c.uri("photo1.jpg"));equals(a[1],c.uri("photo2.jpg"))});test("using the result of sources() as a jQuery object",function(){var a=c.rdf().prefix("dc",d.dc).prefix("foaf",d.foaf).add("<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .").add("<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo2.jpg> .").where("?photo dc:creator ?creator").where("?creator foaf:img ?photo").sources().get(0);
equals(a.length,2,"there are two triples in the first match");equals(a[0].subject,c.rdf.resource("<photo1.jpg>"));equals(a[0].property,"<"+d.dc+"creator>");equals(a[0].object,"<http://www.blogger.com/profile/1109404>");equals(a[1].subject,"<http://www.blogger.com/profile/1109404>");equals(a[1].property,"<"+d.foaf+"img>");equals(a[1].object,c.rdf.resource("<photo1.jpg>"))});test("creating a jQuery object from the rdfQuery object",function(){var a=c.rdf().prefix("dc",d.dc).prefix("foaf",d.foaf).add("<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .").add("<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo2.jpg> .").where("?photo dc:creator ?creator").where("?creator foaf:img ?photo").jquery();
equals(a.jquery,c(document).jquery)});test("filtering some results based on a regular expression",function(){var a=c.rdf({triples:[':book1  dc:title  "SPARQL Tutorial" .',":book1  ns:price  42 .",':book2  dc:title  "The Semantic Web" .',":book2  ns:price  23 ."],namespaces:{dc:"http://purl.org/dc/elements/1.1/","":"http://example.org/book/",ns:"http://example.org/ns#"}}).where("?x dc:title ?title");equals(a.length,2,"should have two items before filtering");a=a.filter("title",/^SPARQL/);equals(a.length,
1,"should have one item after filtering");equals(a[0].title.value,"SPARQL Tutorial")});test("filtering some results, then adding a new matching triple",function(){var a=c.rdf().prefix("dc",d.dc).prefix("","http://example.org/book").add(':book1 dc:title "SPARQL Tutorial"').where("?x dc:title ?title").filter("title",/SPARQL/);equals(a.length,1,"should have one match before adding another triple");a.add(':book2 dc:title "Another SPARQL Tutorial"');equals(a.length,2,"should have two matches after adding another matching triple")});
test("filtering some results, then adding a new triple that matches the where clause but not the filter",function(){var a=c.rdf().prefix("dc",d.dc).prefix("","http://example.org/book").add(':book1 dc:title "SPARQL Tutorial"').where("?x dc:title ?title").filter("title",/SPARQL/);equals(a.length,1,"should have one match before adding another triple");a.add(':book2 dc:title "XQuery Tutorial"');equals(a.length,1,"should have one match after adding a non-matching triple")});test("creating a namespace binding explicitly, not while creating the triples",
function(){var a=c.rdf().prefix("dc","http://purl.org/dc/elements/1.1/").prefix("","http://example.org/book/");try{a.add(':book1 dc:title "SPARQL Tutorial"');ok(true,"should not generate an error");equals(a.databank.triples()[0].subject,"<http://example.org/book/book1>");equals(a.databank.triples()[0].property,"<http://purl.org/dc/elements/1.1/title>")}catch(b){ok(false,"should not generate the error "+b.message)}});test("creating a base URI explicitly, not while creating the triples",function(){var a=
c.rdf().prefix("dc","http://purl.org/dc/elements/1.1/").base("http://www.example.org/images/").add('<photo1.jpg> dc:creator "Jeni"');equals(a.databank.triples()[0].subject,"<http://www.example.org/images/photo1.jpg>")});test("creating an optional clause",function(){var a=c.rdf().prefix("foaf","http://xmlns.com/foaf/0.1/").prefix("rdf","http://www.w3.org/1999/02/22-rdf-syntax-ns#").add("_:a  rdf:type        foaf:Person .").add('_:a  foaf:name       "Alice" .').add("_:a  foaf:mbox       <mailto:alice@example.com> .").add("_:a  foaf:mbox       <mailto:alice@work.example> .").add("_:b  rdf:type        foaf:Person .").add('_:b  foaf:name       "Bob" .').where("?x foaf:name ?name").optional("?x foaf:mbox ?mbox");
equals(a.length,3,"there should be three matches");equals(a[0].name.value,"Alice");equals(a[0].mbox.value,"mailto:alice@example.com");equals(a[1].name.value,"Alice");equals(a[1].mbox.value,"mailto:alice@work.example");equals(a[2].name.value,"Bob");equals(a[2].mbox,undefined)});test("adding a triple after creating an optional clause",function(){var a=c.rdf().prefix("foaf","http://xmlns.com/foaf/0.1/").add('_:a  foaf:name       "Alice" .').add("_:a  foaf:mbox       <mailto:alice@example.com> .").add("_:a  foaf:mbox       <mailto:alice@work.example> .").where("?x foaf:name ?name").optional("?x foaf:mbox ?mbox");
equals(a.length,2,"there should be two matches");a.add('_:b foaf:name "Bob"');equals(a.length,3,"there should be three matches");equals(a[2].name.value,"Bob");equals(a[2].mbox,undefined)});test("adding a triple that should cause the creation of two matches",function(){var a=c.rdf().prefix("foaf","http://xmlns.com/foaf/0.1/").add("_:a  foaf:mbox       <mailto:alice@example.com> .").add("_:a  foaf:mbox       <mailto:alice@work.example> .").where("?x foaf:name ?name").where("?x foaf:mbox ?mbox");equals(a.length,
0,"there should be no matches");a.add('_:a  foaf:name       "Alice" .');equals(a.length,2,"there should be two matches");equals(a[0].name.value,"Alice");equals(a[0].mbox.value,"mailto:alice@example.com");equals(a[1].name.value,"Alice");equals(a[1].mbox.value,"mailto:alice@work.example")});test("adding a triple that satisfies an optional clause",function(){var a=c.rdf().prefix("foaf","http://xmlns.com/foaf/0.1/").add('_:a foaf:name "Alice" .').where("?x foaf:name ?name");equals(a.length,1,"there should be one match");
a=a.optional("?x foaf:mbox ?mbox");equals(a.length,1,"there should be one match");a=a.add("_:a foaf:mbox <mailto:alice@example.com> .");equals(a.length,1,"there should be one match");equals(a[0].name.value,"Alice");equals(a[0].mbox.value,"mailto:alice@example.com")});test("multiple optional clauses",function(){var a=c.rdf().prefix("foaf","http://xmlns.com/foaf/0.1/").add('_:a  foaf:name       "Alice" .').add("_:a  foaf:homepage   <http://work.example.org/alice/> .").add('_:b  foaf:name       "Bob" .').add("_:b  foaf:mbox       <mailto:bob@work.example> .").where("?x foaf:name ?name").optional("?x foaf:mbox ?mbox").optional("?x foaf:homepage ?hpage");
equals(a.length,2,"there should be two matches");equals(a[0].name.value,"Alice");equals(a[0].mbox,undefined);equals(a[0].hpage.value,"http://work.example.org/alice/");equals(a[1].name.value,"Bob");equals(a[1].mbox.value,"mailto:bob@work.example");equals(a[1].hpage,undefined)});test("creating a union from two sets of triples",function(){var a=c.rdf().prefix("dc",d.dc).add('<photo1.jpg> dc:creator "Jane"'),b=c.rdf().prefix("foaf",d.foaf).add('<photo1.jpg> foaf:depicts "Jane"');a=a.add(b);equals(a.union,
undefined,"it shouldn't create a query union");equals(a.databank.union.length,2,"the databank should be a union");equals(a.prefix("dc"),d.dc);equals(a.prefix("foaf"),d.foaf);a=a.where("?photo dc:creator ?person");equals(a.length,1,"it should contain one match");equals(a.get(0).photo.value,c.uri("photo1.jpg"));equals(a.get(0).person.value,"Jane");a=a.where("?photo foaf:depicts ?person");equals(a.length,1,"it should contain one match");equals(a.get(0).photo.value,c.uri("photo1.jpg"));equals(a.get(0).person.value,
"Jane")});test("creating a union from two differently filtered sets of triples",function(){var a=c.rdf().prefix("dc10","http://purl.org/dc/elements/1.0/").prefix("dc11","http://purl.org/dc/elements/1.1/>").add('_:a  dc10:title     "SPARQL Query Language Tutorial" .').add('_:a  dc10:creator   "Alice" .').add('_:b  dc11:title     "SPARQL Protocol Tutorial" .').add('_:b  dc11:creator   "Bob" .').add('_:c  dc10:title     "SPARQL" .').add('_:c  dc11:title     "SPARQL (updated)" .'),b=a.where("?book dc10:title ?title");
equals(b.length,2,"there should be two matches in the first group");a=a.where("?book dc11:title ?title");equals(a.length,2,"there should be two matches in the second group");b=b.add(a);equals(b.length,4,"there should be four matches in the union");equals(b.get(0).title.value,"SPARQL Query Language Tutorial");equals(b.get(1).title.value,"SPARQL");equals(b.get(2).title.value,"SPARQL Protocol Tutorial");equals(b.get(3).title.value,"SPARQL (updated)")});test("creating a union with different bindings",
function(){var a=c.rdf().prefix("dc10","http://purl.org/dc/elements/1.0/").prefix("dc11","http://purl.org/dc/elements/1.1/>").add('_:a  dc10:title     "SPARQL Query Language Tutorial" .').add('_:a  dc10:creator   "Alice" .').add('_:b  dc11:title     "SPARQL Protocol Tutorial" .').add('_:b  dc11:creator   "Bob" .').add('_:c  dc10:title     "SPARQL" .').add('_:c  dc11:title     "SPARQL (updated)" .'),b=a.where("?book dc10:title ?x");a=a.where("?book dc11:title ?y");b=b.add(a);equals(b.length,4,"there should be four matches in the union");
equals(b.get(0).x.value,"SPARQL Query Language Tutorial");equals(b.get(1).x.value,"SPARQL");equals(b.get(2).y.value,"SPARQL Protocol Tutorial");equals(b.get(3).y.value,"SPARQL (updated)")});test("creating a union where several filters have been applied",function(){var a=c.rdf().prefix("dc10","http://purl.org/dc/elements/1.0/").prefix("dc11","http://purl.org/dc/elements/1.1/>").add('_:a  dc10:title     "SPARQL Query Language Tutorial" .').add('_:a  dc10:creator   "Alice" .').add('_:b  dc11:title     "SPARQL Protocol Tutorial" .').add('_:b  dc11:creator   "Bob" .').add('_:c  dc10:title     "SPARQL" .').add('_:c  dc11:title     "SPARQL (updated)" .'),
b=a.where("?book dc10:title ?title").where("?book dc10:creator ?author");a=a.where("?book dc11:title ?title").where("?book dc11:creator ?author");b=b.add(a);equals(b.length,2,"there should be two matches in the union");equals(b.get(0).title.value,"SPARQL Query Language Tutorial");equals(b.get(0).author.value,"Alice");equals(b.get(1).title.value,"SPARQL Protocol Tutorial");equals(b.get(1).author.value,"Bob")});test("adding a triple to a union",function(){var a=c.rdf().prefix("dc10","http://purl.org/dc/elements/1.0/").prefix("dc11",
"http://purl.org/dc/elements/1.1/>").add('_:a  dc10:title     "SPARQL Query Language Tutorial" .').add('_:a  dc10:creator   "Alice" .').add('_:b  dc11:title     "SPARQL Protocol Tutorial" .').add('_:b  dc11:creator   "Bob" .').add('_:c  dc10:title     "SPARQL" .').add('_:c  dc11:title     "SPARQL (updated)" .'),b=a.where("?book dc10:title ?title").where("?book dc10:creator ?author");a=a.where("?book dc11:title ?title").where("?book dc11:creator ?author");b=b.add(a);equals(b.length,2,"there should be two matches in the union");
b=b.add('_:c dc10:creator "Claire"');equals(b.length,3,"there should be three matches in the union");equals(b.get(0).title.value,"SPARQL Query Language Tutorial");equals(b.get(0).author.value,"Alice");equals(b.get(1).title.value,"SPARQL Protocol Tutorial");equals(b.get(1).author.value,"Bob");equals(b.get(2).title.value,"SPARQL");equals(b.get(2).author.value,"Claire")});test("filtering a union with a where clause",function(){var a=c.rdf().prefix("dc10","http://purl.org/dc/elements/1.0/").prefix("dc11",
"http://purl.org/dc/elements/1.1/").add('_:a  dc10:title     "SPARQL Query Language Tutorial" .').add('_:a  dc10:creator   "Alice" .').add('_:b  dc11:title     "SPARQL Protocol Tutorial" .').add('_:b  dc11:creator   "Bob" .').add('_:c  dc10:title     "SPARQL" .').add('_:d  dc11:title     "SPARQL (updated)" .'),b=a.where("?book dc10:title ?title");a=a.where("?book dc11:title ?title");b=b.add(a);equals(b.length,4,"there should be four matches in the union");b=b.where("?book dc10:creator ?author");equals(b.length,
1,"there should be one match in the union");equals(b.get(0).author.value,"Alice");equals(b.get(0).title.value,"SPARQL Query Language Tutorial");b=b.add('_:c dc10:creator "Alex"');equals(b.length,2,"there should be two matches in the union");equals(b.get(1).title.value,"SPARQL");equals(b.get(1).author.value,"Alex")});test("adding a binding after filtering with two where clauses",function(){var a=c.rdf().prefix("dc10","http://purl.org/dc/elements/1.0/").prefix("dc11","http://purl.org/dc/elements/1.1/>").add('_:a  dc10:title     "SPARQL Query Language Tutorial" .').add('_:a  dc10:creator   "Alice" .').add('_:b  dc11:title     "SPARQL Protocol Tutorial" .').add('_:b  dc11:creator   "Bob" .').add('_:c  dc10:title     "SPARQL" .').add('_:d  dc11:title     "SPARQL (updated)" .').where("?book dc11:title ?title").where("?book dc10:creator ?author");
equals(a.length,0,"there should be no matches");a=a.add('_:c dc10:creator "Claire"');equals(a.length,0,"there should still be no matches")});test("filtering a union with a filter clause",function(){var a=c.rdf().prefix("dc10","http://purl.org/dc/elements/1.0/").prefix("dc11","http://purl.org/dc/elements/1.1/>").add('_:a  dc10:title     "SPARQL Query Language Tutorial" .').add('_:a  dc10:creator   "Alice" .').add('_:b  dc11:title     "SPARQL Protocol Tutorial" .').add('_:b  dc11:creator   "Bob" .').add('_:c  dc10:title     "SPARQL" .').add('_:c  dc11:title     "SPARQL (updated)" .'),
b=a.where("?book dc10:title ?title").where("?book dc10:creator ?author");equals(b.length,1,"there should be one match in the first query");equals(b.get(0).title.value,"SPARQL Query Language Tutorial");equals(b.get(0).author.value,"Alice");a=a.where("?book dc11:title ?title").where("?book dc11:creator ?author");equals(a.length,1,"there should be one match in the second query");equals(a.get(0).title.value,"SPARQL Protocol Tutorial");equals(a.get(0).author.value,"Bob");b=b.add(a);equals(b.length,2,"there should be two matches in the union");
b=b.filter("author",/^A/);ok(true,"...after filtering...");equals(b.length,1,"there should be one match in the union");equals(b.get(0).title.value,"SPARQL Query Language Tutorial");equals(b.get(0).author.value,"Alice");b=b.add('_:c dc10:creator "Alex"');ok(true,"...after adding a triple...");equals(b.length,2,"there should be two matches in the union");equals(b.get(0).title.value,"SPARQL Query Language Tutorial");equals(b.get(0).author.value,"Alice");equals(b.get(1).title.value,"SPARQL");equals(b.get(1).author.value,
"Alex")});test("selecting a subset of bindings to retain",function(){var a=c.rdf().prefix("foaf",d.foaf).add("_:alice foaf:knows _:bob").add("_:bob foaf:knows _:clare").add("_:alice foaf:knows _:dave").add("_:dave foaf:knows _:clare").where("?a foaf:knows ?b");equals(a.length,4,"there should be four matches after the first clause");rdfA=a.where("?b foaf:knows ?c");equals(rdfA.length,2,"there should normally be two matches with the second clause");rdfB=a.where("?b foaf:knows ?c",{distinct:["a","c"]});
equals(rdfB.length,1,"there should be one distinct match")});test("grouping based on a binding",function(){var a=c.rdf().prefix("foaf","http://xmlns.com/foaf/0.1/").add('_:a  foaf:name   "Alice" .').add("_:a  foaf:mbox   <mailto:alice@work.example> .").add("_:a  foaf:mbox   <mailto:alice@home.example> .").add('_:b  foaf:name   "Bob" .').add("_:b  foaf:mbox   <mailto:bob@work.example> .").where("?person foaf:name ?name").where("?person foaf:mbox ?email");equals(a.length,3,"there should be three matches");
a=a.group("person");equals(a.length,2,"there should be two matches");equals(a[0].person.value,"_:a");equals(a[0].name[0].value,"Alice");equals(a[0].email[0].value,"mailto:alice@work.example");equals(a[0].email[1].value,"mailto:alice@home.example");equals(a[1].person.value,"_:b");equals(a[1].name[0].value,"Bob");equals(a[1].email[0].value,"mailto:bob@work.example")});test("grouping based on two bindings",function(){var a=c.rdf().prefix("foaf","http://xmlns.com/foaf/0.1/").add('_:a  foaf:givenname   "Alice" .').add('_:a foaf:family_name "Hacker" .').add('_:c  foaf:givenname   "Alice" .').add('_:c foaf:family_name "Hacker" .').add('_:b  foaf:givenname   "Bob" .').add('_:b foaf:family_name "Hacker" .').where("?person foaf:givenname ?forename").where("?person foaf:family_name ?surname");
equals(a.length,3,"there should be three matches");group1=a.group("surname");equals(group1.length,1,"there should be one group");group2=a.group(["surname","forename"]);equals(group2.length,2,"there should be two groups");equals(group2[0].forename.value,"Alice");equals(group2[0].surname.value,"Hacker");equals(group2[0].person[0].value,"_:a");equals(group2[0].person[1].value,"_:c");equals(group2[1].forename.value,"Bob");equals(group2[1].surname.value,"Hacker");equals(group2[1].person[0].value,"_:b")});
test("getting just the first match",function(){var a=c.rdf().prefix("foaf","http://xmlns.com/foaf/0.1/").add('_:a  foaf:name       "Alice" .').add("_:a  foaf:homepage   <http://work.example.org/alice/> .").add('_:b  foaf:name       "Bob" .').add("_:b  foaf:mbox       <mailto:bob@work.example> .").where("?x foaf:name ?name");equals(a.length,2,"there should be two matches");a=a.eq(1);equals(a.length,1,"there should be one match");equals(a[0].name.value,"Bob")});test("creating new triples based on a template",
function(){var a=c.rdf().prefix("foaf",d.foaf).add('_:a    foaf:givenname   "Alice" .').add('_:a    foaf:family_name "Hacker" .').add('_:b    foaf:givenname   "Bob" .').add('_:b    foaf:family_name "Hacker" .').where("?person foaf:givenname ?gname").where("?person foaf:family_name ?fname");equals(a.databank.size(),4,"should contain four triples");equals(a.length,2,"should have two matches");a=a.prefix("vcard",d.vcard).add("?person vcard:N []");equals(a.databank.size(),6,"should contain six triples");
equals(a.length,2,"should have two matches")});test("deleting triples based on a template",function(){var a=c.rdf().prefix("foaf",d.foaf).add('_:a    foaf:givenname   "Alice" .').add('_:a    foaf:family_name "Hacker" .').add('_:b    foaf:givenname   "Bob" .').add('_:b    foaf:family_name "Hacker" .').where("?person foaf:givenname ?gname").where("?person foaf:family_name ?fname");equals(a.databank.size(),4,"should contain four triples");equals(a.length,2,"should have two matches");a=a.remove("?person foaf:family_name ?fname");
equals(a.databank.size(),2,"should contain two triples");equals(a.length,0,"should have no matches");a=a.end();equals(a.length,2,"should have two matches")});test("using end() to reset a filter",function(){var a=c.rdf().prefix("foaf",d.foaf).add('_:a    foaf:givenname   "Alice" .').add('_:a    foaf:family_name "Hacker" .').add('_:b    foaf:givenname   "Bob" .').add('_:b    foaf:family_name "Hacker" .').where('?person foaf:family_name "Hacker"');equals(a.length,2,"should have two matches");a=a.where('?person foaf:givenname "Alice"');
equals(a.length,1,"should have one match");a=a.end();equals(a.length,2,"should have two matches again");a=a.end();equals(a.length,0,"should have no matches")});test("using end() to reset a filter after adding something that matches the previous set of filters",function(){var a=c.rdf().prefix("foaf",d.foaf).add('_:a    foaf:givenname   "Alice" .').add('_:a    foaf:family_name "Hacker" .').add('_:b    foaf:givenname   "Bob" .').add('_:b    foaf:family_name "Hacker" .').where('?person foaf:family_name "Hacker"');
equals(a.length,2,"should have two matches");a=a.where('?person foaf:givenname "Alice"');equals(a.length,1,"should have one match");a=a.add('_:c foaf:family_name "Hacker"');equals(a.length,1,"should have one match");a=a.end();equals(a.length,3,"should have three matches now");a=a.end();equals(a.length,0,"should have no matches")});test("using reset() to reset all filters completely",function(){var a=c.rdf().prefix("foaf",d.foaf).add('_:a    foaf:givenname   "Alice" .').add('_:a    foaf:family_name "Hacker" .').add('_:b    foaf:givenname   "Bob" .').add('_:b    foaf:family_name "Hacker" .').where('?person foaf:family_name "Hacker"').where('?person foaf:givenname "Alice"');
equals(a.length,1,"should have one match");a=a.reset();equals(a.length,0,"should have no matches")});test("using end with subsequent filters",function(){var a=[],b=[];c.rdf().prefix("foaf","http://xmlns.com/foaf/0.1/").add('_:a foaf:surname "Jones" .').add('_:b foaf:surname "Macnamara" .').add('_:c foaf:surname "O\'Malley"').add('_:d foaf:surname "MacFee"').where("?person foaf:surname ?surname").filter("surname",/^Ma?c/).each(function(){a.push(this.surname.value)}).end().filter("surname",/^O'/).each(function(){b.push(this.surname.value)}).end();
equals(a.length,2,"there should be two scottish surnames");equals(b.length,1,"there should be one irish surname")});test("getting all the data about a particular resource",function(){var a=c.rdf().prefix("dc",d.dc).prefix("foaf",d.foaf).add("<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .").add("<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo2.jpg> .").about("<http://www.blogger.com/profile/1109404>");
equals(a.length,2,"there are two triples about <http://www.blogger.com/profile/1109404>");equals(a[0].property.value,d.foaf+"img");equals(a[0].value.value,c.uri("photo1.jpg"));equals(a[1].property.value,d.foaf+"img");equals(a[1].value.value,c.uri("photo2.jpg"))});test("getting the difference between two top-level queries",function(){var a=c.rdf().prefix("foaf",d.foaf).add("_:a foaf:knows _:b").add('_:a foaf:surname "Smith"'),b=c.rdf().prefix("foaf",d.foaf).add("_:a foaf:knows _:b").add('_:b foaf:surname "Jones"'),
e=a.except(b);equals(e.databank.size(),1);equals(e.databank.triples()[0],c.rdf.triple('_:a foaf:surname "Smith"',{namespaces:{foaf:d.foaf}}));a=b.except(a);equals(a.databank.size(),1);equals(a.databank.triples()[0],c.rdf.triple('_:b foaf:surname "Jones"',{namespaces:{foaf:d.foaf}}))});test("dumping the result of a query",function(){var a=c.rdf().prefix("dc",d.dc).prefix("foaf",d.foaf).add("<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .").add("<photo2.jpg> dc:creator <http://www.blogger.com/profile/1109404> .").add("<http://www.blogger.com/profile/1109404> foaf:img <photo2.jpg> .").about("<http://www.blogger.com/profile/1109404>");
equals(a.length,2,"there are two triples about <http://www.blogger.com/profile/1109404>");a=a.dump();ok(a["http://www.blogger.com/profile/1109404"]!==undefined,"there should be a property for the subject");equals(a["http://www.blogger.com/profile/1109404"][d.foaf+"img"].length,2)});module("Dumping Databanks");test("dumping in RDF/XML a triple whose subject is a blank node",function(){var a={foaf:d.foaf},b=c.rdf.triple('_:someone foaf:name "Jeni"',{namespaces:a});a=c.rdf.dump([b],{format:"application/rdf+xml",
namespaces:a});equals(a.documentElement.nodeName,"rdf:RDF");a=a.documentElement;equals(a.childNodes.length,1);a=a.childNodes[0];a=a.attributes.getNamedItemNS(d.rdf,"nodeID")||a.attributes.getNamedItem("rdf:nodeID");ok(a!==undefined&&a!==null,"it should have an rdf:nodeID attribute");equals(a.nodeValue,"someone")});test("dumping a serialised version of RDF/XML",function(){var a={foaf:d.foaf},b=c.rdf.triple('_:someone foaf:name "Jeni"',{namespaces:a});a=c.rdf.dump([b],{format:"application/rdf+xml",
serialize:true,namespaces:a});if(a.substring(0,5)==="<?xml")a=a.substring(a.indexOf("?>")+2);equals(a,'<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:foaf="http://xmlns.com/foaf/0.1/"><rdf:Description rdf:nodeID="someone"><foaf:name>Jeni</foaf:name></rdf:Description></rdf:RDF>')});test("dumping in RDF/XML a triple whose property is rdf:type",function(){var a={foaf:d.foaf},b=c.rdf.triple("_:someone a foaf:Person",{namespaces:a});a=c.rdf.dump([b],{format:"application/rdf+xml",
namespaces:a});equals(a.documentElement.nodeName,"rdf:RDF");a=a.documentElement;equals(a.childNodes.length,1);a=a.childNodes[0];equals(a.namespaceURI,d.foaf);equals(a.nodeName,"foaf:Person");b=a.attributes.getNamedItemNS(d.rdf,"nodeID")||a.attributes.getNamedItem("rdf:nodeID");ok(b!==undefined&&b!==null,"it should have an rdf:nodeID attribute");equals(b.nodeValue,"someone");equals(a.childNodes.length,0,"the rdf:type element shouldn't appear")});test("dumping in RDF/XML a triple whose object is a blank node",
function(){var a={dc:d.dc},b=c.rdf.triple("<photo1.jpg> dc:creator _:someone",{namespaces:a});a=c.rdf.dump([b],{format:"application/rdf+xml",namespaces:a});equals(a.documentElement.nodeName,"rdf:RDF");a=a.documentElement;equals(a.childNodes.length,1);a=a.childNodes[0];var e=a.attributes.getNamedItemNS(d.rdf,"about")||a.attributes.getNamedItem("rdf:about");ok(e!==undefined&&e!==null,"it should have an rdf:about attribute");equals(e.nodeValue,b.subject.value);equals(a.childNodes.length,1);b=a.childNodes[0];
equals(b.namespaceURI,d.dc);equals(b.nodeName,"dc:creator");e=b.attributes.getNamedItemNS(d.rdf,"nodeID")||b.attributes.getNamedItem("rdf:nodeID");ok(e!==undefined&&e!==null,"it should have an rdf:nodeID attribute");equals(e.nodeValue,"someone")});test("dumping in RDF/XML a triple whose object is a untyped literal",function(){var a={dc:d.dc},b=c.rdf.triple('<photo1.jpg> dc:creator "Jeni"',{namespaces:a});a=c.rdf.dump([b],{format:"application/rdf+xml",namespaces:a});equals(a.documentElement.nodeName,
"rdf:RDF");a=a.documentElement;equals(a.childNodes.length,1);a=a.childNodes[0];var e=a.attributes.getNamedItemNS(d.rdf,"about")||a.attributes.getNamedItem("rdf:about");ok(e!==undefined&&e!==null,"it should have an rdf:about attribute");equals(e.nodeValue,b.subject.value);equals(a.childNodes.length,1);b=a.childNodes[0];equals(b.namespaceURI,d.dc);equals(b.nodeName,"dc:creator");equals(b.childNodes.length,1);equals(b.childNodes[0].nodeValue,"Jeni")});test("dumping in RDF/XML a triple whose object is a typed literal",
function(){var a={dc:d.dc,xsd:d.xsd},b=c.rdf.triple('<photo1.jpg> dc:created "2009-01-01"^^xsd:date',{namespaces:a});a=c.rdf.dump([b],{format:"application/rdf+xml",namespaces:a});equals(a.documentElement.nodeName,"rdf:RDF");a=a.documentElement;equals(a.childNodes.length,1);a=a.childNodes[0];var e=a.attributes.getNamedItemNS(d.rdf,"about")||a.attributes.getNamedItem("rdf:about");ok(e!==undefined&&e!==null,"it should have an rdf:about attribute");equals(e.nodeValue,b.subject.value);equals(a.childNodes.length,
1);b=a.childNodes[0];equals(b.namespaceURI,d.dc);equals(b.nodeName,"dc:created");equals(b.childNodes.length,1);equals(b.childNodes[0].nodeValue,"2009-01-01");e=b.attributes.getNamedItemNS(d.rdf,"datatype")||b.attributes.getNamedItem("rdf:datatype");ok(e!==undefined&&e!==null,"it should have an rdf:datatype attribute");equals(e.nodeValue,d.xsd+"date")});test("dumping in RDF/XML a triple whose object is a literal with a language",function(){var a={dc:d.dc,xsd:d.xsd},b=c.rdf.triple('<photo1.jpg> dc:creator "Jeni"@en',
{namespaces:a});a=c.rdf.dump([b],{format:"application/rdf+xml",namespaces:a});equals(a.documentElement.nodeName,"rdf:RDF");a=a.documentElement;equals(a.childNodes.length,1);a=a.childNodes[0];var e=a.attributes.getNamedItemNS(d.rdf,"about")||a.attributes.getNamedItem("rdf:about");ok(e!==undefined&&e!==null,"it should have an rdf:about attribute");equals(e.nodeValue,b.subject.value);equals(a.childNodes.length,1);b=a.childNodes[0];equals(b.namespaceURI,d.dc);equals(b.nodeName,"dc:creator");equals(b.childNodes.length,
1);equals(b.childNodes[0].nodeValue,"Jeni");e=b.attributes.getNamedItemNS(d.xml,"lang")||b.attributes.getNamedItem("xml:lang");ok(e!==undefined&&e!==null,"it should have an xml:lang attribute");equals(e.nodeValue,"en")});test("dumping in RDF/XML a triple whose object is an XML Literal",function(){var a={dc:d.dc,rdf:d.rdf},b=c.rdf.triple('<> dc:title "E = mc<sup xmlns=\\"http://www.w3.org/1999/xhtml\\">2</sup>: The Most Urgent Problem of Our Time"^^rdf:XMLLiteral .',{namespaces:a});a=c.rdf.dump([b],
{format:"application/rdf+xml",namespaces:a});equals(a.documentElement.nodeName,"rdf:RDF");a=a.documentElement;equals(a.childNodes.length,1,"the rdf:RDF element should have one child node");var e=a.childNodes[0];a=e.attributes.getNamedItemNS(d.rdf,"about")||e.attributes.getNamedItem("rdf:about");ok(a!==undefined&&a!==null,"it should have an rdf:about attribute");equals(a.nodeValue,b.subject.value,"the about attribute should hold the subject");equals(e.childNodes.length,1,"the description element should have one child node");
b=e.childNodes[0];equals(b.namespaceURI,d.dc,"the property element should be in the dublin core namespace");equals(b.nodeName,"dc:title","the property element should be called title");a=b.attributes.getNamedItemNS(d.rdf,"parseType")||b.attributes.getNamedItem("rdf:parseType");ok(a!==undefined&&a!==null,"it should have an rdf:parseType attribute");equals(a.nodeValue,"Literal");equals(b.childNodes.length,3,"the property element should have three child nodes");equals(b.childNodes[0].nodeValue,"E = mc",
"the first child node should be a text node with the value E = mc");e=b.childNodes[1];equals(e.namespaceURI,"http://www.w3.org/1999/xhtml","the second child should be in the XHTML namespace");equals(e.nodeName,"sup","the second child should be a sup element");a=e.attributes.getNamedItem("xmlns");ok(a!==undefined&&a!==null,"it should have an xmlns attribute");equals(a.nodeValue,"http://www.w3.org/1999/xhtml","the xmlns attribute should have an XHTML namespace declaration on it");equals(e.childNodes.length,
1,"the sup element should have a child node");equals(e.childNodes[0].nodeValue,"2","the text of the sup element should be 2");equals(b.childNodes[2].nodeValue,": The Most Urgent Problem of Our Time","the third child node should be a text node with the value : The Most Urgent Problem of Our Time")});module("Creating Databanks");test("creating a new databank",function(){var a={dc:d.dc,foaf:d.foaf},b=[c.rdf.triple("<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .",{namespaces:a}),c.rdf.triple("<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .",
{namespaces:a})],e=c.rdf.databank(b);equals(e.subjectIndex[b[0].subject].length,1);equals(e.subjectIndex[b[0].subject][0],b[0]);equals(e.subjectIndex[b[1].subject].length,1);equals(e.subjectIndex[b[1].subject][0],b[1]);equals(e.size(),2);var f=e.dump();ok(f[b[0].subject.value]!==undefined,"the dump should have a property equal to the subject of the first triple");ok(f[b[1].subject.value]!==undefined,"the dump should have a property equals to the subject of the second triple");ok(f[b[0].subject.value][b[0].property.value],
"expecting { subject: { property: { value }}}");ok(f[b[1].subject.value][b[1].property.value],"expecting { subject: { property: { value }}}");equals(f[b[0].subject.value][b[0].property.value][0].type,"uri");equals(f[b[0].subject.value][b[0].property.value][0].value,"http://www.blogger.com/profile/1109404");f=e.dump({serialize:true});equals(f,'{"'+b[0].subject.value+'": {"http://purl.org/dc/elements/1.1/creator": [{"type": "uri", "value": "http://www.blogger.com/profile/1109404"}]}, "http://www.blogger.com/profile/1109404": {"http://xmlns.com/foaf/0.1/img": [{"type": "uri", "value": "'+
b[0].subject.value+'"}]}}');a=e.dump({format:"application/rdf+xml",namespaces:a});equals(a.documentElement.nodeName,"rdf:RDF");a=a.documentElement;e=a.attributes.getNamedItemNS(d.xmlns,"rdf")||a.attributes.getNamedItem("xmlns:rdf");ok(e!==undefined&&e!==null,"it should have an xmlns:rdf declaration");equals(e.nodeValue,d.rdf);e=a.attributes.getNamedItemNS(d.xmlns,"dc")||a.attributes.getNamedItem("xmlns:dc");ok(e!==undefined&&e!==null,"it should have an xmlns:dc declaration");equals(e.nodeValue,d.dc);
e=a.attributes.getNamedItemNS(d.xmlns,"foaf")||a.attributes.getNamedItem("xmlns:foaf");ok(e!==undefined&&e!==null,"it should have an xmlns:foaf declaration");equals(e.nodeValue,d.foaf);equals(a.childNodes.length,2);e=a.childNodes[0];equals(e.namespaceURI,d.rdf);equals(e.nodeName,"rdf:Description");f=e.attributes.getNamedItemNS(d.rdf,"about")||e.attributes.getNamedItem("rdf:about");ok(f!==undefined&&f!==null,"it should have an rdf:about attribute");equals(f.nodeValue,b[0].subject.value);e=e.childNodes[0];
equals(e.namespaceURI,d.dc);equals(e.nodeName,"dc:creator");f=e.attributes.getNamedItemNS(d.rdf,"resource")||e.attributes.getNamedItem("rdf:resource");ok(f!==undefined&&f!==null,"it should have an rdf:resource attribute");equals(f.nodeValue,b[0].object.value);e=a.childNodes[1];equals(e.namespaceURI,d.rdf);equals(e.nodeName,"rdf:Description");f=e.attributes.getNamedItemNS(d.rdf,"about")||e.attributes.getNamedItem("rdf:about");ok(f!==undefined&&f!==null,"it should have an rdf:about attribute");equals(f.nodeValue,
b[1].subject.value);e=e.childNodes[0];equals(e.namespaceURI,d.foaf);equals(e.nodeName,"foaf:img");f=e.attributes.getNamedItemNS(d.rdf,"resource")||e.attributes.getNamedItem("rdf:resource");ok(f!==undefined&&f!==null,"it should have an rdf:resource attribute");equals(f.nodeValue,b[1].object.value)});test("loading JSON/RDF into a databank",function(){var a=c.rdf.databank();a.load({"http://example.com/aReallyGreatBook":{"http://purl.org/dc/elements/1.1/title":[{type:"literal",value:"A Really Great Book"}],
"http://purl.org/dc/elements/1.1/creator":[{type:"bnode",value:"_:creator"}],"http://purl.org/dc/terms/issued":[{type:"literal",value:"2004-01-19",datatype:"http://www.w3.org/2001/XMLSchema#date"}]},"_:creator":{"http://www.w3.org/1999/02/22-rdf-syntax-ns#type":[{type:"uri",value:"http://xmlns.com/foaf/0.1/Person"}],"http://xmlns.com/foaf/0.1/name":[{type:"literal",value:"John Doe"}]}});equals(a.size(),5)});test("loading RDF/XML into a databank",function(){var a=g('<rdf:Description xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"    xmlns:dc="http://purl.org/dc/elements/1.1/"                             rdf:about="http://www.w3.org/TR/rdf-syntax-grammar">                  <dc:title>RDF/XML Syntax Specification (Revised)</dc:title>           </rdf:Description>                                                      '),
b=c.rdf.databank();b.load(a);equals(b.size(),1);a=b.triples()[0];equals(a.subject.value.toString(),"http://www.w3.org/TR/rdf-syntax-grammar");equals(a.property.value.toString(),d.dc+"title");equals(a.object.value.toString(),"RDF/XML Syntax Specification (Revised)")});test("loading RDF/XML with (anonymous) blank nodes into a databank",function(){var a=g('<rdf:Description rdf:about="http://www.w3.org/TR/rdf-syntax-grammar"  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"  xmlns:ex="http://www.example.org/">  <ex:editor>    <rdf:Description>      <ex:homePage>        <rdf:Description rdf:about="http://purl.org/net/dajobe/">        </rdf:Description>      </ex:homePage>    </rdf:Description>  </ex:editor></rdf:Description>'),
b=c.rdf.databank();b.load(a);equals(b.size(),2);a=b.triples()[0];b=b.triples()[1];equals(b.subject.value,"http://www.w3.org/TR/rdf-syntax-grammar");equals(b.property.value,"http://www.example.org/editor");equals(b.object,a.subject);equals(a.property.value,"http://www.example.org/homePage");equals(a.object.value,"http://purl.org/net/dajobe/")});test("loading RDF/XML with multiple property elements",function(){var a=g('<rdf:Description rdf:about="http://www.w3.org/TR/rdf-syntax-grammar"  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"  xmlns:dc="http://purl.org/dc/elements/1.1/"  xmlns:ex="http://www.example.org/">  <ex:editor>    <rdf:Description>      <ex:homePage>        <rdf:Description rdf:about="http://purl.org/net/dajobe/">        </rdf:Description>      </ex:homePage>      <ex:fullName>Dave Beckett</ex:fullName>    </rdf:Description>  </ex:editor>  <dc:title>RDF/XML Syntax Specification (Revised)</dc:title></rdf:Description>'),
b=c.rdf.databank();b.load(a);equals(b.size(),4)});test("loading RDF/XML with an rdf:resource attribute",function(){var a=g('<rdf:Description rdf:about="http://www.w3.org/TR/rdf-syntax-grammar"  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"  xmlns:dc="http://purl.org/dc/elements/1.1/"  xmlns:ex="http://www.example.org/">  <ex:editor>    <rdf:Description>      <ex:homePage rdf:resource="http://purl.org/net/dajobe/" />      <ex:fullName>Dave Beckett</ex:fullName>    </rdf:Description>  </ex:editor>  <dc:title>RDF/XML Syntax Specification (Revised)</dc:title></rdf:Description>'),
b=c.rdf.databank();b.load(a);equals(b.size(),4)});test("loading RDF/XML with property attributes",function(){var a=g('<rdf:Description rdf:about="http://www.w3.org/TR/rdf-syntax-grammar"  dc:title="RDF/XML Syntax Specification (Revised)"  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"  xmlns:dc="http://purl.org/dc/elements/1.1/"  xmlns:ex="http://www.example.org/">  <ex:editor>    <rdf:Description ex:fullName="Dave Beckett">      <ex:homePage rdf:resource="http://purl.org/net/dajobe/"/>    </rdf:Description>  </ex:editor></rdf:Description>'),
b=c.rdf.databank();b.load(a);equals(b.size(),4)});test("loading RDF/XML whose document element is an rdf:RDF element",function(){var a=g('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"         xmlns:dc="http://purl.org/dc/elements/1.1/"         xmlns:ex="http://example.org/stuff/1.0/">  <rdf:Description rdf:about="http://www.w3.org/TR/rdf-syntax-grammar"\t\t   dc:title="RDF/XML Syntax Specification (Revised)">    <ex:editor>      <rdf:Description ex:fullName="Dave Beckett">\t<ex:homePage rdf:resource="http://purl.org/net/dajobe/" />      </rdf:Description>    </ex:editor>  </rdf:Description></rdf:RDF>'),
b=c.rdf.databank();b.load(a);equals(b.size(),4)});test("loading RDF/XML with xml:lang attributes in it",function(){var a=g('<rdf:Description xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"  xmlns:dc="http://purl.org/dc/elements/1.1/"  rdf:about="http://example.org/buecher/baum" xml:lang="de">  <dc:title>Der Baum</dc:title>  <dc:description>Das Buch ist au\u00dfergew\u00f6hnlich</dc:description>  <dc:title xml:lang="en">The Tree</dc:title></rdf:Description>'),b=c.rdf.databank();b.load(a);equals(b.size(),
3);a=b.triples();equals(a[0].object.value,"Der Baum");equals(a[0].object.lang,"de");equals(a[1].object.lang,"de");equals(a[2].object.lang,"en")});test("loading RDF/XML with xml:lang attributes on property elements",function(){var a=g('<rdf:Description xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"  xmlns:dc="http://purl.org/dc/elements/1.1/"  rdf:about="http://example.org/buecher/baum">  <dc:title xml:lang="de">Der Baum</dc:title>  <dc:description xml:lang="de">Das Buch ist au\u00dfergew\u00f6hnlich</dc:description>  <dc:title xml:lang="en">The Tree</dc:title></rdf:Description>'),
b=c.rdf.databank();b.load(a);equals(b.size(),3);a=b.triples();equals(a[0].object.value,"Der Baum");equals(a[0].object.lang,"de");equals(a[1].object.value,"Das Buch ist au\u00dfergew\u00f6hnlich");equals(a[1].object.lang,"de");equals(a[2].object.value,"The Tree");equals(a[2].object.lang,"en")});test("loading RDF/XML containing XML literals",function(){var a=g('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"         xmlns:ex="http://example.org/stuff/1.0/">  <rdf:Description rdf:about="http://example.org/item01">    <ex:prop rdf:parseType="Literal"             xmlns:a="http://example.org/a#">      <a:Box required="true"><a:widget size="10" /><a:grommit id="23" /></a:Box>    </ex:prop>  </rdf:Description></rdf:RDF>'),
b=c.rdf.databank();b.load(a);equals(b.size(),1);equals(b.triples()[0].object.value,'<a:Box xmlns:a="http://example.org/a#" required="true"><a:widget size="10"/><a:grommit id="23"/></a:Box>');equals(b.triples()[0].object.datatype,d.rdf+"XMLLiteral")});test("loading RDF/XML with a property whose value has a datatype",function(){var a=g('<rdf:Description rdf:about="http://example.org/item01"  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"  xmlns:ex="http://www.example.org/">  <ex:size rdf:datatype="http://www.w3.org/2001/XMLSchema#int">123</ex:size></rdf:Description>'),
b=c.rdf.databank();b.load(a);equals(b.size(),1);equals(b.triples()[0].object.value,"123");equals(b.triples()[0].object.datatype,d.xsd+"int")});test("loading RDF/XML with identified blank nodes",function(){var a=g('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"         xmlns:dc="http://purl.org/dc/elements/1.1/"         xmlns:ex="http://example.org/stuff/1.0/">  <rdf:Description rdf:about="http://www.w3.org/TR/rdf-syntax-grammar"\t\t   dc:title="RDF/XML Syntax Specification (Revised)">    <ex:editor rdf:nodeID="abc"/>  </rdf:Description>  <rdf:Description rdf:nodeID="abc"                   ex:fullName="Dave Beckett">    <ex:homePage rdf:resource="http://purl.org/net/dajobe/"/>  </rdf:Description></rdf:RDF>'),
b=c.rdf.databank();b.load(a);equals(b.size(),4);equals(b.triples()[1].object.type,"bnode");equals(b.triples()[1].object.value,"_:abc");equals(b.triples()[2].subject.type,"bnode");equals(b.triples()[2].subject.value,"_:abc")});test("loading RDF/XML with rdf:parseType='Resource'",function(){var a=g('<rdf:Description rdf:about="http://www.w3.org/TR/rdf-syntax-grammar"  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"  xmlns:dc="http://purl.org/dc/elements/1.1/"  xmlns:ex="http://example.org/stuff/1.0/"\t dc:title="RDF/XML Syntax Specification (Revised)">  <ex:editor rdf:parseType="Resource">    <ex:fullName>Dave Beckett</ex:fullName>    <ex:homePage rdf:resource="http://purl.org/net/dajobe/"/>  </ex:editor></rdf:Description>'),
b=c.rdf.databank();b.load(a);equals(b.size(),4);a=b.triples();equals(a[3].object,a[1].subject)});test("loading RDF/XML with a property element having property attributes",function(){var a=g('<rdf:Description rdf:about="http://www.w3.org/TR/rdf-syntax-grammar"  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"  xmlns:dc="http://purl.org/dc/elements/1.1/"  xmlns:ex="http://example.org/stuff/1.0/"\t   dc:title="RDF/XML Syntax Specification (Revised)">  <ex:editor ex:fullName="Dave Beckett" /></rdf:Description>'),
b=c.rdf.databank();b.load(a);equals(b.size(),3)});test("loading RDF/XML with typed node elements",function(){var a=g('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"         xmlns:dc="http://purl.org/dc/elements/1.1/"         xmlns:ex="http://example.org/stuff/1.0/">  <ex:Document rdf:about="http://example.org/thing">    <dc:title>A marvelous thing</dc:title>  </ex:Document></rdf:RDF>'),b=c.rdf.databank();b.load(a);equals(b.size(),2);equals(b.triples()[0].property.value,d.rdf+"type");
equals(b.triples()[0].object.value,"http://example.org/stuff/1.0/Document")});test("loading RDF/XML with xml:base and rdf:ID attributes",function(){var a=g('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"         xmlns:ex="http://example.org/stuff/1.0/"         xml:base="http://example.org/here/">  <rdf:Description rdf:ID="snack">    <ex:prop rdf:resource="fruit/apple"/>  </rdf:Description></rdf:RDF>'),b=c.rdf.databank();b.load(a);a=b.triples();equals(a[0].subject.value,"http://example.org/here/#snack");
equals(a[0].object.value,"http://example.org/here/fruit/apple")});test("loading RDF/XML with rdf:li elements",function(){var a=g('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">  <rdf:Seq rdf:about="http://example.org/favourite-fruit">    <rdf:li rdf:resource="http://example.org/banana"/>    <rdf:li rdf:resource="http://example.org/apple"/>    <rdf:li rdf:resource="http://example.org/pear"/>  </rdf:Seq></rdf:RDF>'),b=c.rdf.databank();b.load(a);a=b.triples();equals(a.length,4);equals(a[1].property.value,
d.rdf+"_1");equals(a[2].property.value,d.rdf+"_2");equals(a[3].property.value,d.rdf+"_3")});test("loading RDF/XML with parseType='Collection'",function(){var a=g('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"         xmlns:ex="http://example.org/stuff/1.0/">  <rdf:Description rdf:about="http://example.org/basket">    <ex:hasFruit rdf:parseType="Collection">      <rdf:Description rdf:about="http://example.org/banana"/>      <rdf:Description rdf:about="http://example.org/apple"/>      <rdf:Description rdf:about="http://example.org/pear"/>    </ex:hasFruit>  </rdf:Description></rdf:RDF>'),
b=c.rdf.databank();b.load(a);a=b.triples();equals(a[0].property.value,d.rdf+"first");equals(a[0].object.value,"http://example.org/banana");equals(a[6].object,a[1].subject);equals(a[1].property.value,d.rdf+"rest");equals(a[1].object,a[2].subject);equals(a[2].property.value,d.rdf+"first");equals(a[2].object.value,"http://example.org/apple");equals(a[1].object,a[3].subject);equals(a[3].property.value,d.rdf+"rest");equals(a[3].object,a[4].subject);equals(a[4].property.value,d.rdf+"first");equals(a[4].object.value,
"http://example.org/pear");equals(a[3].object,a[5].subject);equals(a[5].property.value,d.rdf+"rest");equals(a[5].object.value,d.rdf+"nil");equals(a[6].subject.value,"http://example.org/basket");equals(a[6].property.value,"http://example.org/stuff/1.0/hasFruit");equals(a[6].object.type,"bnode");equals(a[6].object,a[0].subject)});test("loading RDF/XML with rdf:IDs to reify triples",function(){var a=g('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"         xmlns:ex="http://example.org/stuff/1.0/"         xml:base="http://example.org/triples/">  <rdf:Description rdf:about="http://example.org/">    <ex:prop rdf:ID="triple1">blah</ex:prop>  </rdf:Description></rdf:RDF>'),
b=c.rdf.databank();b.load(a);a=b.triples();equals(a.length,4);equals(a[0].subject.value,"http://example.org/");equals(a[0].property.value,"http://example.org/stuff/1.0/prop");equals(a[0].object.value,"blah");equals(a[1].subject.value,"http://example.org/triples/#triple1");equals(a[1].property.value,d.rdf+"subject");equals(a[1].object.value,"http://example.org/");equals(a[2].subject.value,"http://example.org/triples/#triple1");equals(a[2].property.value,d.rdf+"property");equals(a[2].object.value,"http://example.org/stuff/1.0/prop");
equals(a[3].subject.value,"http://example.org/triples/#triple1");equals(a[3].property.value,d.rdf+"object");equals(a[3].object.value,"blah")});test("getting the triples from a databank",function(){var a={dc:d.dc,foaf:d.foaf};a=[c.rdf.triple("<photo1.jpg> dc:creator <http://www.blogger.com/profile/1109404> .",{namespaces:a}),c.rdf.triple("<http://www.blogger.com/profile/1109404> foaf:img <photo1.jpg> .",{namespaces:a})];var b=c.rdf.databank(a);equals(b.triples()[0],a[0]);equals(b.triples()[1],a[1])});
test("getting the difference between two databanks",function(){var a=c.rdf.databank().prefix("foaf",d.foaf).add("_:a foaf:knows _:b").add('_:a foaf:surname "Smith"'),b=c.rdf.databank().prefix("foaf",d.foaf).add("_:a foaf:knows _:b").add('_:b foaf:surname "Jones"'),e=a.except(b);equals(e.size(),1);equals(e.triples()[0],c.rdf.triple('_:a foaf:surname "Smith"',{namespaces:{foaf:d.foaf}}));a=b.except(a);equals(a.size(),1);equals(a.triples()[0],c.rdf.triple('_:b foaf:surname "Jones"',{namespaces:{foaf:d.foaf}}))});
test("describing a resource that is not the object of any triples, and the subject of two",function(){equals(h.size(),29);var a=h.describe(["<http://example.com/aBookCritic>"]);equals(a.length,2);equals(a[0],c.rdf.triple("<http://example.com/aBookCritic> <http://example.com/likes> <http://example.com/aReallyGreatBook> ."));equals(a[1],c.rdf.triple("<http://example.com/aBookCritic> <http://example.com/dislikes> <http://example.com/anotherGreatBook> ."))});test("describing a resource that is also the object of two triples",
function(){equals(h.size(),29);var a=h.describe(["<http://example.com/anotherGreatBook>"]);equals(a.length,10)});test("describing a resource with a property that holds a blank node",function(){equals(h.size(),29);var a=h.describe(["<http://example.com/aReallyGreatBook>"]);equals(a.length,18)});test("describing a resource where there's a statement with this as an object, and a blank node as the subject",function(){equals(h.size(),29);var a=h.describe(["<http://example.com/john.jpg>"]);equals(a.length,
9)});test("describing two resources with overlapping triples",function(){equals(h.size(),29);var a=h.describe(["_:creator","<http://example.com/john.jpg>"]);equals(a.length,9)});test("removing a triple from a databank",function(){var a=c.rdf.databank().prefix("foaf",d.foaf).add("_:a foaf:knows _:b").add('_:a foaf:surname "Smith"'),b=c.rdf({databank:a}).where("?a foaf:knows ?b");equals(a.size(),2);equals(b.size(),1);a.remove("_:a foaf:knows _:b");equals(a.size(),1);equals(b.size(),0)});test("updating queries when triples are removed from a databank",
function(){var a=c.rdf.databank().prefix("foaf",d.foaf).add("_:a foaf:knows _:b").add('_:a foaf:surname "Smith"'),b=c.rdf({databank:a}),e=b.where("?a foaf:knows ?b"),f=e.where("?a foaf:surname ?s");equals(b.size(),0);equals(e.size(),1);equals(f.size(),1);a.remove("_:a foaf:knows _:b");equals(b.size(),0);equals(e.size(),0);equals(f.size(),0)});module("Creating Patterns");test("two identical patterns",function(){var a=c.rdf.pattern("<a> <b> ?c"),b=c.rdf.pattern("<a> <b> ?c");ok(a===b,"should be identical")});
module("Creating Triples");test("two identical triples",function(){var a=c.rdf.triple("<a> <b> <c>"),b=c.rdf.triple("<a> <b> <c>");ok(a===b,"should be equal")});test("creating a triple with explicit subject, predicate and object",function(){var a=c.rdf.triple("<http://www.example.com/foo/>","dc:creator","<mailto:someone@example.com>",{namespaces:{dc:d.dc}});equals(a.subject.type,"uri","the subject should be a resource");equals(a.subject.value,"http://www.example.com/foo/");equals(a.property.type,
"uri","the property should be a resource");equals(a.property.value,d.dc+"creator");equals(a.object.type,"uri","the object should be a resource");equals(a.object.value,"mailto:someone@example.com");equals(a,"<http://www.example.com/foo/> <"+d.dc+"creator> <mailto:someone@example.com> .")});test("creating an rdf:type triple",function(){var a=c.rdf.triple("<http://example.org/path>","a","doc:Document",{namespaces:{doc:"http://example.org/#ns"}});equals(a.subject.value,"http://example.org/path");equals(a.property.value,
d.rdf+"type");equals(a.object.value,"http://example.org/#nsDocument");equals(a,"<http://example.org/path> <"+d.rdf+"type> <http://example.org/#nsDocument> .")});test("creating a triple using a string",function(){var a=c.rdf.triple("<http://www.example.com/foo/> dc:creator <mailto:someone@example.com> .",{namespaces:{dc:d.dc}});equals(a.subject.value,"http://www.example.com/foo/");equals(a.property.value,d.dc+"creator");equals(a.object.value,"mailto:someone@example.com");var b=a.dump();ok(b["http://www.example.com/foo/"]!==
undefined,"the dumped triple should have a property equal to the subject");ok(b["http://www.example.com/foo/"][a.property.value]!==undefined,"the dumped triple's subject property should have a property whose name is the property name");equals(b["http://www.example.com/foo/"][a.property.value].type,"uri");equals(b["http://www.example.com/foo/"][a.property.value].value,"mailto:someone@example.com")});test("creating a triple using a string with a literal value",function(){var a=c.rdf.triple('<http://www.example.com/foo/> dc:subject "foo"',
{namespaces:{dc:d.dc}});equals(a.subject.value,"http://www.example.com/foo/");equals(a.property.value,d.dc+"subject");ok(!a.object.resource,"the object isn't a resource");equals(a.object.value,"foo")});test("creating a triple using a string with a literal value with a space in it",function(){var a=c.rdf.triple('<http://www.example.com/foo/> dc:subject "foo bar"',{namespaces:{dc:d.dc}});equals(a.subject.value,"http://www.example.com/foo/");equals(a.property.value,d.dc+"subject");ok(!a.object.resource,
"the object isn't a resource");equals(a.object.value,"foo bar")});test("creating a triple with an unprefixed name and a value with a space in it",function(){var a=c.rdf.triple(':book1  dc:title  "SPARQL Tutorial" .',{namespaces:{"":"http://example.org/book/",dc:d.dc}});equals(a.subject.value,"http://example.org/book/book1");equals(a.property.value,d.dc+"title");equals(a.object.value,"SPARQL Tutorial")});test("creating a triple with a literal value with quotes in it",function(){var a=c.rdf.triple('<> dc:title "E = mc<sup xmlns=\\"http://www.w3.org/1999/xhtml\\">2</sup>: The Most Urgent Problem of Our Time"^^rdf:XMLLiteral .',
{namespaces:{dc:d.dc,rdf:d.rdf}});equals(a.subject.value,c.uri.base());equals(a.property.value,d.dc+"title");equals(a.object.value,'E = mc<sup xmlns="http://www.w3.org/1999/xhtml">2</sup>: The Most Urgent Problem of Our Time');equals(a.object.datatype,d.rdf+"XMLLiteral")});test("creating a triple that belongs to a graph",function(){var a=c.rdf.triple("<d> <e> <f>",{graph:"<>"});equals(a.subject.value,c.uri("d"));equals(a.property.value,c.uri("e"));equals(a.object.value,c.uri("f"));equals(a.graph.value,
c.uri.base())});test("two triples that belong to different graphs",function(){var a=c.rdf.triple("<a> <b> <c>"),b=c.rdf.triple("<a> <b> <c>",{graph:"<>"});ok(a!==b,"should not be equal")});module("Creating Resources");test("two identical resources",function(){var a=c.rdf.resource("<http://www.example.org/subject>"),b=c.rdf.resource("<http://www.example.org/subject>");ok(a===b,"should equal each other")});test("a resource",function(){var a=c.rdf.resource("<http://www.example.org/subject>");equals(a.value,
"http://www.example.org/subject","should have a value property containing the uri");equals(a.type,"uri",'should have a type of "uri"');a=a.dump();equals(a.type,"uri");equals(a.value,"http://www.example.org/subject")});test("creating a resource with strings in angle brackets (URIs)",function(){var a=c.rdf.resource("<http://www.example.org/subject>");equals(a.value,"http://www.example.org/subject")});test("creating a resource with a relative uri",function(){var a=c.rdf.resource("<subject>");equals(""+
a.value,""+c.uri("subject"))});test("creating a resource with a relative uri and supplying a base uri",function(){var a=c.rdf.resource("<subject>",{base:"http://www.example.org/"});equals(""+a.value,""+c.uri.resolve("subject","http://www.example.org/"))});test("creating a resource with a uri that contains a greater-than sign",function(){var a=c.rdf.resource("<"+"http://www.example.org/a>b".replace(/>/g,"\\>")+">");equals(a.value,"http://www.example.org/a>b")});test("creating a resource using a string that looks like an absolute uri",
function(){try{c.rdf.resource("http://www.example.org/subject");ok(false,"should throw an error")}catch(a){ok(true,"should throw an error")}});test("creating a resource from a curie",function(){var a=c.rdf.resource("dc:creator",{namespaces:{dc:"http://purl.org/dc/elements/1.1/"}});equals(a.value,"http://purl.org/dc/elements/1.1/creator")});test("creating a resource from a qname starting with ':'",function(){var a=c.rdf.resource(":bar",{namespaces:{"":"http://www.example.com/foo/"}});equals(a.value,
"http://www.example.com/foo/bar")});test("creating a resource from a qname starting with ':' with no default namespace binding",function(){try{c.rdf.resource(":bar");ok(false,"should raise an error")}catch(a){ok(true,"should raise an error")}});test("creating a resource from a qname ending with ':'",function(){var a=c.rdf.resource("foo:",{namespaces:{foo:"http://www.example.com/foo/"}});equals(a.value,"http://www.example.com/foo/")});test("creating a resource from a qname ending with ':' with no binding for the prefix",
function(){try{c.rdf.resource("foo:");ok(false,"should raise an error")}catch(a){ok(true,"should raise an error")}});module("Creating literals");test("two identical literals",function(){var a=c.rdf.literal('"foo"'),b=c.rdf.literal('"foo"');ok(a===b,"should be equal")});test("a literal",function(){var a=c.rdf.literal('"foo"');equals(a.value,"foo","should have a value property");equals(a.type,"literal",'should have a type of "literal"')});test("creating a literal with a datatype",function(){var a=c.rdf.literal("2008-10-04",
{datatype:d.xsd+"date"});equals(a.value,"2008-10-04");equals(a.datatype,d.xsd+"date")});test("creating a literal with a datatype represented by a safe CURIE",function(){var a=c.rdf.literal("2008-10-04",{datatype:"[xsd:date]",namespaces:{xsd:d.xsd}});equals(a.value,"2008-10-04");equals(a.datatype,d.xsd+"date")});test("creating a literal with a language",function(){var a=c.rdf.literal("chat",{lang:"fr"});equals(a.value,"chat");equals(a.lang,"fr")});test("creating a literal using quotes around the value",
function(){var a=c.rdf.literal('"cat"');equals(a.value,"cat")});test("creating a literal using quotes, with quotes in the literal",function(){var a=c.rdf.literal('"She said, \\"hello!\\""');equals(a.value,'She said, "hello!"')});test("creating literal true",function(){var a=c.rdf.literal("true");equals(a.value,true);equals(a.datatype,d.xsd+"boolean")});test("creating literal false",function(){var a=c.rdf.literal("false");equals(a.value,false);equals(a.datatype,d.xsd+"boolean")});test("creating the literal true from the value true",
function(){var a=c.rdf.literal(true);equals(a.value,true);equals(a.datatype,d.xsd+"boolean")});test("creating a boolean by passing the appropriate datatype",function(){var a=c.rdf.literal("true",{datatype:d.xsd+"boolean"});equals(a.value,true);equals(a.datatype,d.xsd+"boolean")});test("trying to create a boolean with an invalid literal",function(){try{c.rdf.literal("foo",{datatype:d.xsd+"boolean"});ok(false,"should throw an error")}catch(a){equals(a.name,"InvalidValue")}});test("creating literal integers",
function(){var a=c.rdf.literal("17");equals(a.value,17);equals(a.datatype,d.xsd+"integer")});test("creating a negative literal integer",function(){var a=c.rdf.literal("-5");equals(a.value,-5);equals(a.datatype,d.xsd+"integer")});test("creating the integer zero",function(){var a=c.rdf.literal("0");equals(a.value,0);equals(a.datatype,d.xsd+"integer")});test("creating the decimal zero",function(){var a=c.rdf.literal("0.0");equals(a.value,"0.0");equals(a.datatype,d.xsd+"decimal")});test("creating a decimal with decimal points",
function(){var a=c.rdf.literal("1.234567890123456789");equals(a.value,"1.234567890123456789");equals(""+a.value,"1.234567890123456789","string representation should be preserved");equals(a.datatype,d.xsd+"decimal")});test("creating floating point zero",function(){var a=c.rdf.literal("0.0e0");equals(a.value,0);equals(a.datatype,d.xsd+"double")});test("creating floating point -12.5e10",function(){var a=c.rdf.literal("-12.5e10");equals(a.value,-125000000000);equals(a.datatype,d.xsd+"double")});test("creating an double from an Javascript number",
function(){var a=c.rdf.literal(5);equals(a.value,5);equals(a.datatype,d.xsd+"double")});test("creating a number by passing an appropriate datatype",function(){var a=c.rdf.literal("5",{datatype:d.xsd+"integer"});equals(a.value,5);ok(typeof a.value==="number","value should be a number");equals(a.datatype,d.xsd+"integer")});test("creating a date by specifying the datatype in the value",function(){var a=c.rdf.literal('"2008-10-05"^^<http://www.w3.org/2001/XMLSchema#date>');equals(a.value,"2008-10-05");
equals(a.datatype,"http://www.w3.org/2001/XMLSchema#date");equals(a,'"2008-10-05"^^<http://www.w3.org/2001/XMLSchema#date>');a.dump();equals(a.type,"literal");equals(a.value,"2008-10-05");equals(a.datatype,"http://www.w3.org/2001/XMLSchema#date")});test("creating a literal with a language by specifying the language in the value",function(){var a=c.rdf.literal('"chat"@fr');equals(a.value,"chat");equals(a.lang,"fr");equals(a,'"chat"@fr');a.dump();equals(a.type,"literal");equals(a.value,"chat");equals(a.lang,
"fr")});test("creating an XMLLiteral with a language",function(){var a=c.rdf.literal("<foo />",{datatype:d.rdf+"XMLLiteral",lang:"fr"});equals(a.value,"<foo />");equals(a.datatype,d.rdf+"XMLLiteral");equals(a.lang,"fr")});module("Creating blank nodes");test("two blank nodes with the same id",function(){var a=c.rdf.blank("_:foo"),b=c.rdf.blank("_:foo");ok(a===b,"should be identical")});test("creating a blank node",function(){var a=c.rdf.blank("_:foo");equals(a.type,"bnode");equals(a.value,"_:foo");
equals(a.id,"foo");a=a.dump();equals(a.type,"bnode");equals(a.value,"_:foo");ok(a.id===undefined,"the dumped version of a blank node should not have an id")});test("creating two blank nodes",function(){var a=c.rdf.blank("[]"),b=c.rdf.blank("[]");ok(a.id!==b.id,"they should have distinct ids "+a.id+" != "+b.id)})})(jQuery);
